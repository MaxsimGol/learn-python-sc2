"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[5240],{625:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.4 - Managing Groups- The Units Collection","title":"4.4 - Managing Groups- The Units Collection","description":"A single Unit is an atom, but StarCraft II is a game of armies. To manage groups of units\u2014your entire worker line, your main army, or an enemy attack wave\u2014you need a more powerful tool. The Units object is that tool.","source":"@site/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.4 - Managing Groups- The Units Collection.md","sourceDirName":"Part 2 - Core Concepts/Chapter 4 - Reading the Game State","slug":"/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.4 - Managing Groups- The Units Collection","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.4 - Managing Groups- The Units Collection","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"4.3 - Understanding Units - The Unit Attributes","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.3 - Understanding Units - The Unit Attributes"},"next":{"title":"5.1 - The Core of Control","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.1 - The Core of Control"}}');var s=n(4848),i=n(8453);const o={},a=void 0,l={},d=[{value:"<strong>The Power of a Fluent API: Chaining Queries</strong>",id:"the-power-of-a-fluent-api-chaining-queries",level:4},{value:"<strong>Key <code>Units</code> Methods: A Developer&#39;s Toolkit</strong>",id:"key-units-methods-a-developers-toolkit",level:4},{value:"<strong>A Developer&#39;s Checklist for Managing a Group</strong>",id:"a-developers-checklist-for-managing-a-group",level:4},{value:"<strong>Code Example: The Army Commander Bot</strong>",id:"code-example-the-army-commander-bot",level:4}];function c(e){const t={code:"code",em:"em",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["A single ",(0,s.jsx)(t.code,{children:"Unit"})," is an atom, but StarCraft II is a game of armies. To manage groups of units\u2014your entire worker line, your main army, or an enemy attack wave\u2014you need a more powerful tool. The ",(0,s.jsx)(t.code,{children:"Units"})," object is that tool."]}),"\n",(0,s.jsxs)(t.p,{children:["It is a specialized collection of ",(0,s.jsx)(t.code,{children:"Unit"})," objects, supercharged with methods designed specifically for the logic of an RTS. Mastering the ",(0,s.jsx)(t.code,{children:"Units"})," collection is the key to writing clean, efficient, and readable code for managing groups."]}),"\n",(0,s.jsx)(t.h4,{id:"the-power-of-a-fluent-api-chaining-queries",children:(0,s.jsx)(t.strong,{children:"The Power of a Fluent API: Chaining Queries"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Units"})," object uses a ",(0,s.jsx)(t.strong,{children:"fluent API"}),", which means that most of its filtering methods return a ",(0,s.jsx)(t.em,{children:"new"})," ",(0,s.jsx)(t.code,{children:"Units"})," object. This allows you to chain methods together, building a highly specific query from left to right. It is a far more powerful and readable alternative to nested loops and ",(0,s.jsx)(t.code,{children:"if"})," statements."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"[ self.units ] -> A huge collection of all your units.\r\n     |\r\n     v\r\n[ .of_type(MARINE) ] -> Only Marines.\r\n     |\r\n     v\r\n[ .idle ] -> Only idle Marines.\r\n     |\r\n     v\r\n[ .sorted(key) ] -> Only idle Marines, sorted by distance.\r\n     |\r\n     v\r\n[ .first ] -> The single, closest, idle Marine.\n"})}),"\n",(0,s.jsx)(t.p,{children:"This elegant, single line of code replaces what would otherwise be a complex and error-prone block of loops."}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h4,{id:"key-units-methods-a-developers-toolkit",children:(0,s.jsxs)(t.strong,{children:["Key ",(0,s.jsx)(t.code,{children:"Units"})," Methods: A Developer's Toolkit"]})}),"\n",(0,s.jsx)(t.p,{children:"These methods can be grouped by their function."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Category"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Method"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"What It Returns"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Primary Use Case in a Project"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"Checking"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:".exists"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:".amount"})]}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:"bool"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:"int"})]}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:['The most common checks: "Do I have any marines?" (',(0,s.jsx)(t.code,{children:"if marines.exists:"}),")."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"Selecting"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:".first"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:".random"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:".random_or(None)"})]}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:"Unit"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:"Unit"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:"Unit"})," or ",(0,s.jsx)(t.code,{children:"None"})]}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:["Grabbing a single unit from a collection. ",(0,s.jsx)(t.code,{children:".random_or(None)"})," is the safest option."]})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"Filtering"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:".of_type(type_id)"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:".idle"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:".ready"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:".closer_than(dist, pos)"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:".further_than(dist, pos)"})]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"Units"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"These are the core of the fluent API. They narrow down your collection to only the units that match a specific criteria."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"Ordering & Finding"})}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:".sorted(key)"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:".closest_to(pos)"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:".furthest_to(pos)"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:".center"})]}),(0,s.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,s.jsx)(t.code,{children:"Units"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:"Unit"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:"Unit"})," ",(0,s.jsx)("br",{})," ",(0,s.jsx)(t.code,{children:"Point2"})]}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Used after filtering to find the best candidate from a group, or to find the group's center of mass."})]})]})]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h4,{id:"a-developers-checklist-for-managing-a-group",children:(0,s.jsx)(t.strong,{children:"A Developer's Checklist for Managing a Group"})}),"\n",(0,s.jsx)(t.p,{children:"When you need to command a group of units, follow this process:"}),"\n",(0,s.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(t.strong,{children:"1. Start Broad:"})," Get the initial collection (e.g., ",(0,s.jsx)(t.code,{children:"self.units"}),")."]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(t.strong,{children:"2. Filter by Type:"})," Narrow it down to the units you care about (e.g., ",(0,s.jsx)(t.code,{children:"self.units(UnitTypeId.MARINE)"}),")."]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(t.strong,{children:"3. Filter by State:"})," Apply state-based filters (e.g., ",(0,s.jsx)(t.code,{children:".idle"}),", ",(0,s.jsx)(t.code,{children:".ready"}),")."]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(t.strong,{children:"4. Check for Existence:"})," Always check ",(0,s.jsx)(t.code,{children:".exists"})," before trying to access a unit from the collection."]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(t.strong,{children:"5. Select or Iterate:"})," Grab a single unit (",(0,s.jsx)(t.code,{children:".closest_to()"}),") or loop through the entire filtered collection to issue commands."]}),"\n"]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h4,{id:"code-example-the-army-commander-bot",children:(0,s.jsx)(t.strong,{children:"Code Example: The Army Commander Bot"})}),"\n",(0,s.jsxs)(t.p,{children:["This bot demonstrates advanced use of ",(0,s.jsx)(t.code,{children:"Units"})," collections to manage an army. It will group idle units into a control group and send them to attack, while also pulling back damaged units from the front line."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# army_commander_bot.py\r\n\r\nimport sc2\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.race import Race, Difficulty\r\nfrom sc2.units import Units\r\n\r\nclass ArmyCommanderBot(BotAI):\r\n    """Demonstrates advanced group management with the Units collection."""\r\n\r\n    async def on_step(self, iteration: int):\r\n        # We need a target to attack.\r\n        attack_target = self.enemy_start_locations[0]\r\n        if self.enemy_structures.exists:\r\n            attack_target = self.enemy_structures.random.position\r\n\r\n        # 1. Manage the main army.\r\n        await self.manage_army(attack_target)\r\n\r\n        # 2. Keep building units to reinforce the army.\r\n        await self.train_reinforcements()\r\n\r\n\r\n    async def manage_army(self, attack_target):\r\n        # Create a Units collection of all our marines.\r\n        marines: Units = self.units(UnitTypeId.MARINE)\r\n\r\n        # Use chained queries to form two distinct groups.\r\n        # Group 1: Healthy marines that are idle and ready to attack.\r\n        idle_and_healthy_marines: Units = marines.idle.filter(lambda m: m.health_percentage > 0.8)\r\n\r\n        # Group 2: Any marine that is damaged, regardless of what it\'s doing.\r\n        damaged_marines: Units = marines.filter(lambda m: m.health_percentage <= 0.8)\r\n\r\n        # Command the idle and healthy group to attack the target.\r\n        if idle_and_healthy_marines.exists:\r\n            # We can issue a command to the entire Units collection at once.\r\n            self.do(idle_and_healthy_marines.attack(attack_target))\r\n\r\n        # Command the damaged group to retreat to a safe rally point.\r\n        if damaged_marines.exists:\r\n            safe_rally_point = self.start_location.towards(self.game_info.map_center, 15)\r\n            self.do(damaged_marines.move(safe_rally_point))\r\n\r\n    async def train_reinforcements(self):\r\n        """A simple method to keep building marines."""\r\n        # Find idle, ready barracks.\r\n        idle_barracks: Units = self.structures(UnitTypeId.BARRACKS).ready.idle\r\n        if self.can_afford(UnitTypeId.MARINE) and idle_barracks.exists:\r\n            # Train a marine from a random idle barracks.\r\n            idle_barracks.random.train(UnitTypeId.MARINE)\r\n\r\n        # Build prerequisite structures if they don\'t exist.\r\n        elif not self.structures(UnitTypeId.BARRACKS).exists and self.can_afford(UnitTypeId.BARRACKS):\r\n             await self.build(UnitTypeId.BARRACKS, near=self.start_location.towards(self.game_info.map_center, 8))\r\n        elif self.structures(UnitTypeId.BARRACKS).exists and self.structures(UnitTypeId.SUPPLYDEPOT).amount < 2 and self.can_afford(UnitTypeId.SUPPLYDEPOT):\r\n             await self.build(UnitTypeId.SUPPLYDEPOT, near=self.start_location.towards(self.game_info.map_center, 5))\r\n\r\n\r\nif __name__ == "__main__":\r\n    sc2.run_game(\r\n        sc2.maps.get("BlackburnAIE"),\r\n        [\r\n            Bot(Race.Terran, ArmyCommanderBot()),\r\n            Computer(Race.Zerg, Difficulty.Easy)\r\n        ],\r\n        realtime=True,\r\n    )\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>a});var r=n(6540);const s={},i=r.createContext(s);function o(e){const t=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),r.createElement(i.Provider,{value:t},e.children)}}}]);