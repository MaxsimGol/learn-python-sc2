"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[4177],{3291:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.2 - Dynamic Info- Minerals, Supply, and Time","title":"4.2 - Dynamic Info- Minerals, Supply, and Time","description":"If self.game_info is the unchanging blueprint of the battlefield, then the data available through self.state and its convenience properties represents your bot\'s real-time senses. This is the dynamic information\u2014minerals, supply, unit positions, time\u2014that changes on every single frame of the game.","source":"@site/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.2 - Dynamic Info- Minerals, Supply, and Time.md","sourceDirName":"Part 2 - Core Concepts/Chapter 4 - Reading the Game State","slug":"/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.2 - Dynamic Info- Minerals, Supply, and Time","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.2 - Dynamic Info- Minerals, Supply, and Time","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"4.1 - Static Info - Map Name, Size, and Start Locations","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.1 - Static Info - Map Name, Size, and Start Locations"},"next":{"title":"4.3 - Understanding Units - The Unit Attributes","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.3 - Understanding Units - The Unit Attributes"}}');var r=n(4848),i=n(8453);const l={},o=void 0,a={},d=[{value:"<strong>The Core AI Loop: Sense, Think, Act</strong>",id:"the-core-ai-loop-sense-think-act",level:4},{value:"<strong>Key Dynamic Properties (Your Bot&#39;s Senses)</strong>",id:"key-dynamic-properties-your-bots-senses",level:4},{value:"<strong>A Developer&#39;s Decision-Making Checklist</strong>",id:"a-developers-decision-making-checklist",level:4},{value:"<strong>Code Example: The Starter Macro Bot</strong>",id:"code-example-the-starter-macro-bot",level:4}];function c(e){const t={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["If ",(0,r.jsx)(t.code,{children:"self.game_info"})," is the unchanging blueprint of the battlefield, then the data available through ",(0,r.jsx)(t.code,{children:"self.state"})," and its convenience properties represents your bot's real-time ",(0,r.jsx)(t.strong,{children:"senses"}),". This is the dynamic information\u2014minerals, supply, unit positions, time\u2014that changes on every single frame of the game."]}),"\n",(0,r.jsx)(t.p,{children:"Mastering your bot's senses is the key to reactive, intelligent behavior. This data is the input for every decision your bot will ever make."}),"\n",(0,r.jsx)(t.h4,{id:"the-core-ai-loop-sense-think-act",children:(0,r.jsx)(t.strong,{children:"The Core AI Loop: Sense, Think, Act"})}),"\n",(0,r.jsxs)(t.p,{children:["Your ",(0,r.jsx)(t.code,{children:"on_step"})," method should be structured around this fundamental AI control loop."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:".-------------------- SENSE ------------------------.\r\n|   - What are my resources? (self.minerals)        |\r\n|   - How much supply do I have? (self.supply_left) |\r\n|   - Where are my units? (self.units)              |\r\n|   - Where are the enemy units? (self.enemy_units) |\r\n`---------------------------------------------------`\r\n                      |\r\n                      v\r\n.-------------------- THINK --------------------.\r\n|   if self.minerals > 100:                     |\r\n|   if self.supply_left < 5:                    |\r\n|   if self.enemy_units.in_attack_range_of(x):  |\r\n`---------------------------------------------`\r\n                      |\r\n                      v\r\n.--------------------- ACT ---------------------.\r\n|   await self.build(UnitTypeId.BARRACKS, ...)  |\r\n|   barracks.train(UnitTypeId.MARINE)           |\r\n`-----------------------------------------------`\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Your bot continuously cycles through this loop within ",(0,r.jsx)(t.code,{children:"on_step"}),", sensing the world, applying its strategic logic, and issuing commands."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"key-dynamic-properties-your-bots-senses",children:(0,r.jsx)(t.strong,{children:"Key Dynamic Properties (Your Bot's Senses)"})}),"\n",(0,r.jsxs)(t.p,{children:["While the raw data lives in ",(0,r.jsx)(t.code,{children:"self.state"}),", the ",(0,r.jsx)(t.code,{children:"BotAI"})," class provides easy-to-use convenience properties. ",(0,r.jsx)(t.strong,{children:"You should always prefer these helpers."})]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Category"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Property"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Data Type"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Practical Use in a Project"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Resources"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"self.minerals"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"self.vespene"})]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"int"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Crucial for managing your bot's in-game economy, representing the current stockpile of minerals and vespene gas, respectively."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Supply"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"self.supply_used"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"self.supply_cap"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"self.supply_left"})]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"int"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Triggers the construction of new Supply Depots, Pylons, or Overlords to avoid being supply-blocked. The cap in ",(0,r.jsx)(t.code,{children:"self.supply_cap"})," short for capacity."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Time"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"self.time"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"self.time_formatted"})]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"float"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"str"})]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Used for timing build orders, scouting schedules, and logging events. ",(0,r.jsx)(t.code,{children:"self.time"})," is more reliable than ",(0,r.jsx)(t.code,{children:"iteration"}),"."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Your Units"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"self.units"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"self.structures"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"self.workers"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"self.townhalls"})]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"Units"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The main tools for managing your forces. Used to find idle units, issue commands, and check army composition."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Enemy Units"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"self.enemy_units"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"self.enemy_structures"})]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"Units"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"The primary input for all combat and reactive logic. Used to check for threats and identify targets."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Production"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"self.already_pending(unit_id)"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"float"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Crucial for preventing redundant actions, like building two Supply Depots when you only need one."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"For RL Devs"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"All of the above"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"N/A"}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"These properties form the core of a structured observation space for a Reinforcement Learning agent. Normalizing these values (e.g., supply used / 200) is a common and effective practice."})]})]})]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"a-developers-decision-making-checklist",children:(0,r.jsx)(t.strong,{children:"A Developer's Decision-Making Checklist"})}),"\n",(0,r.jsxs)(t.p,{children:["When writing your ",(0,r.jsx)(t.code,{children:"on_step"})," logic, follow this thought process:"]}),"\n",(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"1. Am I alive?"})," Check if you have townhalls. If not, you've likely lost."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"2. Can I spend my money?"})," Check ",(0,r.jsx)(t.code,{children:"self.minerals"})," and ",(0,r.jsx)(t.code,{children:"self.vespene"}),". Idle resources are wasted resources."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"3. Am I supply-blocked?"})," Check ",(0,r.jsx)(t.code,{children:"self.supply_left"}),". If it's too low, building supply should be your #1 priority."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"4. Are my production buildings busy?"})," Find idle townhalls, barracks, etc., and queue a unit."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"5. Am I under attack?"})," Check if ",(0,r.jsx)(t.code,{children:"self.enemy_units"})," are near your key structures."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"code-example-the-starter-macro-bot",children:(0,r.jsx)(t.strong,{children:"Code Example: The Starter Macro Bot"})}),"\n",(0,r.jsx)(t.p,{children:"This bot demonstrates a robust, basic macroeconomic cycle. It constantly builds workers and ensures it never gets supply-blocked\u2014the two most important skills for any new bot."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# starter_macro_bot.py\r\n\r\nfrom sc2.main import run_game\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.data import Race, Difficulty\r\n\r\n\r\nclass MacroBot(BotAI):\r\n    """\r\n    A bot that demonstrates a basic economic cycle using dynamic info.\r\n    1. Constantly builds workers.\r\n    2. Builds supply structures when needed.\r\n    """\r\n\r\n    async def on_step(self, iteration: int):\r\n        # The two core tasks of macro: worker production and supply management.\r\n        await self.manage_worker_production()\r\n        await self.manage_supply()\r\n\r\n    async def manage_worker_production(self):\r\n        """Builds workers from idle townhalls if we can afford them."""\r\n        # SENSE: Do we have any townhalls? Are they idle? Can we afford a worker?\r\n        if (\r\n            self.townhalls.exists\r\n            and self.can_afford(UnitTypeId.SCV)\r\n            and self.townhalls.idle.exists\r\n        ):\r\n            # THINK: We have an idle townhall and money for an SCV.\r\n            # ACT: Train an SCV from a random idle townhall.\r\n            idle_townhall = self.townhalls.idle.random\r\n            idle_townhall.train(UnitTypeId.SCV)\r\n\r\n    async def manage_supply(self):\r\n        """Builds a Supply Depot if we are running low on supply."""\r\n        # SENSE: Is our supply running low? Are we already building a depot?\r\n        # A good threshold is supply_left < (number of townhalls * 2) + 2\r\n        supply_threshold = self.townhalls.amount * 2 + 2\r\n        is_supply_low = self.supply_left < supply_threshold\r\n        is_depot_in_progress = self.already_pending(UnitTypeId.SUPPLYDEPOT) > 0\r\n\r\n        # THINK: If supply is low AND we aren\'t already building a depot, we must act.\r\n        if (\r\n            is_supply_low\r\n            and not is_depot_in_progress\r\n            and self.can_afford(UnitTypeId.SUPPLYDEPOT)\r\n        ):\r\n            # ACT: Build a Supply Depot near our first townhall.\r\n            # self.find_placement is a powerful but potentially slow function.\r\n            build_location = await self.find_placement(\r\n                UnitTypeId.SUPPLYDEPOT,\r\n                near=self.townhalls.first.position,\r\n                max_distance=10,\r\n            )\r\n            if build_location:\r\n                # Use the built-in helper to select a worker for building.\r\n                worker = self.select_build_worker(build_location)\r\n                if worker:\r\n                    worker.build(UnitTypeId.SUPPLYDEPOT, build_location)\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("AbyssalReefLE"),\r\n        [Bot(Race.Terran, MacroBot()), Computer(Race.Zerg, Difficulty.VeryEasy)],\r\n        realtime=True,\r\n    )\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>o});var s=n(6540);const r={},i=s.createContext(r);function l(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);