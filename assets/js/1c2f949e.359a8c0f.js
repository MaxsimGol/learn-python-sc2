"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[4210],{7031:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>c,default:()=>d,frontMatter:()=>i,metadata:()=>o,toc:()=>a});const o=JSON.parse('{"id":"Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 1 - Introduction to RL Concepts/1.2 - The Core Challenge - async vs sync","title":"1.2 - The Core Challenge - async vs sync","description":"The primary technical hurdle in integrating python-sc2 with a library like stable-baselines3 is not specific to StarCraft II, but is a fundamental architectural conflict between their programming models: one is asynchronous and the other is synchronous.","source":"@site/docs/Part 5 - Reinforcement Learning/1 - Foundations of Reinforcement Learning/Chapter 1 - Introduction to RL Concepts/1.2 - The Core Challenge - async vs sync.md","sourceDirName":"Part 5 - Reinforcement Learning/1 - Foundations of Reinforcement Learning/Chapter 1 - Introduction to RL Concepts","slug":"/Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 1 - Introduction to RL Concepts/1.2 - The Core Challenge - async vs sync","permalink":"/learn-python-sc2/docs/Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 1 - Introduction to RL Concepts/1.2 - The Core Challenge - async vs sync","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"1.1 - What is RL for SC2","permalink":"/learn-python-sc2/docs/Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 1 - Introduction to RL Concepts/1.1 - What is RL for SC2"},"next":{"title":"1.3 - Our Solution - The Gym Environment Wrapper","permalink":"/learn-python-sc2/docs/Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 1 - Introduction to RL Concepts/1.3 - Our Solution - The Gym Environment Wrapper"}}');var s=t(4848),r=t(8453);const i={},c=void 0,l={},a=[{value:"<strong>A Clash of Execution Models</strong>",id:"a-clash-of-execution-models",level:4},{value:"<strong>The Technical Deadlock</strong>",id:"the-technical-deadlock",level:4},{value:"<strong>The Solution- Inter-Process Communication (IPC)</strong>",id:"the-solution--inter-process-communication-ipc",level:4},{value:"<strong>Architectural Blueprint</strong>",id:"architectural-blueprint",level:4}];function h(e){const n={code:"code",em:"em",h4:"h4",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["The primary technical hurdle in integrating ",(0,s.jsx)(n.code,{children:"python-sc2"})," with a library like ",(0,s.jsx)(n.code,{children:"stable-baselines3"})," is not specific to StarCraft II, but is a fundamental architectural conflict between their programming models: one is ",(0,s.jsx)(n.strong,{children:"asynchronous"})," and the other is ",(0,s.jsx)(n.strong,{children:"synchronous"}),"."]}),"\n",(0,s.jsx)(n.p,{children:"A direct combination of these two libraries within the same process and thread is not feasible."}),"\n",(0,s.jsx)(n.h4,{id:"a-clash-of-execution-models",children:(0,s.jsx)(n.strong,{children:"A Clash of Execution Models"})}),"\n",(0,s.jsx)(n.p,{children:"The two libraries operate on opposing assumptions about which component controls the main application loop."}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Aspect"}),(0,s.jsxs)(n.th,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"python-sc2"})," (Asynchronous)"]}),(0,s.jsxs)(n.th,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"stable-baselines3"})," (Synchronous)"]})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Control Flow"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["An ",(0,s.jsx)(n.code,{children:"asyncio"})," event loop runs in the background. It ",(0,s.jsx)(n.em,{children:"calls our code"})," (",(0,s.jsx)(n.code,{children:"on_step"}),") when an event occurs."]}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["A standard Python ",(0,s.jsx)(n.code,{children:"for"})," loop runs in the foreground. It ",(0,s.jsx)(n.em,{children:"calls the environment's code"})," (",(0,s.jsx)(n.code,{children:"env.step()"}),") when it chooses."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Blocking"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["Non-blocking. ",(0,s.jsx)(n.code,{children:"await"})," yields control to the event loop."]}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["Blocking. ",(0,s.jsx)(n.code,{children:"env.step()"})," must return before the loop continues."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Paradigm"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:'Event-Driven ("Tell me when the game state updates.")'}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:'Imperative ("Do this step now and give me the result.")'})]})]})]}),"\n",(0,s.jsx)(n.h4,{id:"the-technical-deadlock",children:(0,s.jsx)(n.strong,{children:"The Technical Deadlock"})}),"\n",(0,s.jsx)(n.p,{children:"This clash creates a deadlock:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["Running the synchronous RL training loop ",(0,s.jsx)(n.em,{children:"inside"})," the asynchronous ",(0,s.jsx)(n.code,{children:"on_step"})," would block the entire ",(0,s.jsx)(n.code,{children:"asyncio"})," event loop, freezing the game."]}),"\n",(0,s.jsxs)(n.li,{children:["Running the asynchronous ",(0,s.jsx)(n.code,{children:"python-sc2"})," game loop ",(0,s.jsx)(n.em,{children:"inside"})," the synchronous ",(0,s.jsx)(n.code,{children:"env.step()"})," method would fail, as there would be no running event loop to handle ",(0,s.jsx)(n.code,{children:"await"})," calls."]}),"\n"]}),"\n",(0,s.jsx)(n.h4,{id:"the-solution--inter-process-communication-ipc",children:(0,s.jsx)(n.strong,{children:"The Solution- Inter-Process Communication (IPC)"})}),"\n",(0,s.jsxs)(n.p,{children:["The standard architectural pattern to resolve this is to run each component in its own ",(0,s.jsx)(n.strong,{children:"process"})," and have them communicate via a messaging system, such as ",(0,s.jsx)(n.strong,{children:"queues"}),"."]}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Process 1 (RL Trainer):"})," Runs the synchronous ",(0,s.jsx)(n.code,{children:"stable-baselines3"})," training loop."]}),"\n",(0,s.jsxs)(n.li,{children:[(0,s.jsx)(n.strong,{children:"Process 2 (SC2 Game):"})," Runs the asynchronous ",(0,s.jsx)(n.code,{children:"python-sc2"})," game loop."]}),"\n"]}),"\n",(0,s.jsx)(n.p,{children:"This decouples the two loops, allowing them to run concurrently without blocking each other."}),"\n",(0,s.jsx)(n.h4,{id:"architectural-blueprint",children:(0,s.jsx)(n.strong,{children:"Architectural Blueprint"})}),"\n",(0,s.jsx)(n.p,{children:"This diagram illustrates the flow of information between the two processes."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"       +------------------------------------+      Action Queue     +---------------------------------+\r\n       |      Process 1: RL Trainer (Sync)  |----------------------\x3e|  Process 2: SC2 Game (Async)    |\r\n       |                                    |                       |                                 |\r\n       |   # Blocks, waiting for obs        |                       |   # Blocks, waiting for action  |\r\n       |   obs, ... = obs_q.get()           |                       |   action = action_q.get()       |\r\n       |   action = model.predict(obs)      |                       |   ... execute action in SC2 ... |\r\n       |   action_q.put(action)             |                       |   obs_q.put(new_obs)            |\r\n       |                                    |                       |                                 |\r\n       +------------------------------------+<----------------------+---------------------------------+\r\n                                               Observation Queue\n"})}),"\n",(0,s.jsxs)(n.p,{children:["In the next chapter, we will implement this IPC bridge, creating a ",(0,s.jsx)(n.code,{children:"gymnasium"})," environment that spawns the StarCraft II game in a separate process, ready for our RL agent to interact with."]})]})}function d(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>c});var o=t(6540);const s={},r=o.createContext(s);function i(e){const n=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),o.createElement(r.Provider,{value:n},e.children)}}}]);