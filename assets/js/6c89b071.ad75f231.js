"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[1229],{8257:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.5 - Using Special Abilities","title":"5.5 - Using Special Abilities","description":"Beyond basic commands, many units have powerful abilities that define high-level strategy\u2014a Sentry\'s Force Field, a Ghost\'s Snipe, or a Queen\'s Inject Larva. The library provides a direct and intuitive syntax for using these abilities by making the Unit object itself \\"callable.\\"","source":"@site/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.5 - Using Special Abilities.md","sourceDirName":"Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions","slug":"/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.5 - Using Special Abilities","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.5 - Using Special Abilities","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"5.4 - Production- Training Units and Researching Upgrades","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.4 - Production- Training Units and Researching Upgrades"},"next":{"title":"6.1 - Macro-management - Expanding and Managing Your Economy","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.1 - Macro-management - Expanding and Managing Your Economy"}}');var s=n(4848),r=n(8453);const a={},l=void 0,o={},c=[{value:"<strong>The Callable Unit: A Unified Syntax</strong>",id:"the-callable-unit-a-unified-syntax",level:4},{value:"<strong>The Professional Ability Workflow</strong>",id:"the-professional-ability-workflow",level:4},{value:"<strong>Step 2 Deep Dive: <code>self.get_available_abilities()</code></strong>",id:"step-2-deep-dive-selfget_available_abilities",level:4},{value:"<strong>Developer&#39;s Checklist for Using an Ability</strong>",id:"developers-checklist-for-using-an-ability",level:4},{value:"<strong>Code Example: The Zerg Matriarch Bot</strong>",id:"code-example-the-zerg-matriarch-bot",level:4}];function d(e){const t={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(t.p,{children:["Beyond basic commands, many units have powerful abilities that define high-level strategy\u2014a Sentry's Force Field, a Ghost's Snipe, or a Queen's Inject Larva. The library provides a direct and intuitive syntax for using these abilities by making the ",(0,s.jsx)(t.code,{children:"Unit"}),' object itself "callable."']}),"\n",(0,s.jsx)(t.h4,{id:"the-callable-unit-a-unified-syntax",children:(0,s.jsx)(t.strong,{children:"The Callable Unit: A Unified Syntax"})}),"\n",(0,s.jsxs)(t.p,{children:["The core method for using any ability is to treat the ",(0,s.jsx)(t.code,{children:"Unit"})," object as a function."]}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"Syntax:"})," ",(0,s.jsx)(t.code,{children:"unit(ability_id, target, queue)"})]}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.strong,{children:"What it returns:"})," A ",(0,s.jsx)(t.code,{children:"UnitCommand"})," object. This means it must be executed with ",(0,s.jsx)(t.code,{children:"self.do()"})," (e.g., ",(0,s.jsx)(t.code,{children:"await self.do(unit(...))"}),")."]}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"This unified syntax handles all types of abilities."}),"\n",(0,s.jsxs)(t.table,{children:[(0,s.jsx)(t.thead,{children:(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Target Type"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Example"}),(0,s.jsx)(t.th,{style:{textAlign:"left"},children:"Use Case"})]})}),(0,s.jsxs)(t.tbody,{children:[(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"No Target"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"marine(AbilityId.EFFECT_STIMPACK)"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Self-cast abilities like Stimpack or a Medivac's Heal."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"Unit Target"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"ghost(AbilityId.SNIPEDOT_SNIPE, target_ultralisk)"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Abilities that must be cast on another unit."})]}),(0,s.jsxs)(t.tr,{children:[(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.strong,{children:"Point Target"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:(0,s.jsx)(t.code,{children:"sentry(AbilityId.FORCEFIELD_FORCEFIELD, location)"})}),(0,s.jsx)(t.td,{style:{textAlign:"left"},children:"Abilities that are cast on a specific point on the ground."})]})]})]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h4,{id:"the-professional-ability-workflow",children:(0,s.jsx)(t.strong,{children:"The Professional Ability Workflow"})}),"\n",(0,s.jsx)(t.p,{children:"Issuing an ability command blindly will lead to errors. A professional bot follows a strict, four-step workflow to ensure the command is valid and will succeed."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{children:"(You want to use an ability...)\r\n         |\r\n         v\r\n.--- 1. SELECT CASTER ---------.\r\n| `queens = self.units(QUEEN)` |\r\n`------------------------------`\r\n         |\r\n         v\r\n.--- 2. CHECK PREREQUISITES --------------------.\r\n| - `queen.energy >= 25`                        |\r\n| - `await self.get_available_abilities(queen)` |\r\n`-----------------------------------------------`\r\n         | (Checks pass)\r\n         v\r\n.--- 3. FIND VALID TARGET --------------------.\r\n| `target = self.townhalls.closest_to(queen)` |\r\n`---------------------------------------------`\r\n         | (Target found)\r\n         v\r\n.---- 4. ISSUE COMMAND ----------------------------------------.\r\n| `await self.do(queen(AbilityId.EFFECT_INJECTLARVA, target))` |\r\n`--------------------------------------------------------------`\n"})}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h4,{id:"step-2-deep-dive-selfget_available_abilities",children:(0,s.jsxs)(t.strong,{children:["Step 2 Deep Dive: ",(0,s.jsx)(t.code,{children:"self.get_available_abilities()"})]})}),"\n",(0,s.jsxs)(t.p,{children:["Just checking a unit's energy (",(0,s.jsx)(t.code,{children:"unit.energy"}),") is a common beginner mistake. An ability might have enough energy but still be on cooldown."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:(0,s.jsx)(t.code,{children:"await self.get_available_abilities(unit)"})})," is the only reliable way to check. This ",(0,s.jsx)(t.code,{children:"async"})," function queries the game and returns a list of every ",(0,s.jsx)(t.code,{children:"AbilityId"})," that a specific unit can use on the current game tick."]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Rule of Thumb:"})," Before casting any ability with a cooldown, you ",(0,s.jsx)(t.strong,{children:"must"})," check if its ",(0,s.jsx)(t.code,{children:"AbilityId"})," is present in the list returned by this function."]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h4,{id:"developers-checklist-for-using-an-ability",children:(0,s.jsx)(t.strong,{children:"Developer's Checklist for Using an Ability"})}),"\n",(0,s.jsx)(t.p,{children:"Before writing your code, follow this plan:"}),"\n",(0,s.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(t.strong,{children:"1. Identify the Caster:"})," Get a ",(0,s.jsx)(t.code,{children:"Units"})," collection of the units that can cast the spell."]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(t.strong,{children:"2. Check Resources:"})," Filter the collection for units with enough energy."]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(t.strong,{children:"3. Check Cooldown:"})," In a loop, use ",(0,s.jsx)(t.code,{children:"await self.get_available_abilities()"})," for each potential caster to see if the ability is ready."]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(t.strong,{children:"4. Find a Target:"})," If the ability is targeted, find a suitable ",(0,s.jsx)(t.code,{children:"Unit"})," or ",(0,s.jsx)(t.code,{children:"Point2"}),"."]}),"\n",(0,s.jsxs)(t.li,{className:"task-list-item",children:[(0,s.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(t.strong,{children:"5. Issue the Command:"})," Use ",(0,s.jsx)(t.code,{children:"await self.do(unit(ABILITY_ID, target))"})," to execute the action."]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:[(0,s.jsx)(t.strong,{children:"Pro Tip:"})," To find the ",(0,s.jsx)(t.code,{children:"AbilityId"})," for a specific action, you can explore the ",(0,s.jsx)(t.code,{children:"burnysc2.ids.ability_id"})," file in the library's source code, or use a tool like the StarCraft II Data Dumper."]}),"\n",(0,s.jsx)(t.hr,{}),"\n",(0,s.jsx)(t.h4,{id:"code-example-the-zerg-matriarch-bot",children:(0,s.jsx)(t.strong,{children:"Code Example: The Zerg Matriarch Bot"})}),"\n",(0,s.jsx)(t.p,{children:'This bot demonstrates the complete, professional workflow for using a Queen\'s "Inject Larva" ability. Each step in the code directly corresponds to a step in the workflow diagram.'}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'# matriarch_bot.py\r\n\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.data import Difficulty, Race\r\nfrom sc2.main import run_game\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.ids.ability_id import AbilityId\r\nfrom sc2.ids.buff_id import BuffId\r\nfrom sc2.units import Units\r\n\r\nclass MatriarchBot(BotAI):\r\n    """Demonstrates the robust workflow for using a Queen\'s inject ability."""\r\n\r\n    async def on_step(self, iteration: int):\r\n        await self.manage_injects()\r\n        # Helper to build a basic Zerg setup for the demo.\r\n        await self.build_infrastructure()\r\n\r\n    async def manage_injects(self):\r\n        # WORKFLOW STEP 1: SELECT CASTERS\r\n        # Find all Queens that have enough energy for an inject.\r\n        queens_with_energy: Units = self.units(UnitTypeId.QUEEN).filter(lambda q: q.energy >= 25)\r\n        if not queens_with_energy:\r\n            return\r\n\r\n        for queen in queens_with_energy:\r\n            # WORKFLOW STEP 2: CHECK PREREQUISITES (COOLDOWN)\r\n            # Query the game to see which abilities this specific queen can use right now.\r\n            available_abilities = await self.get_available_abilities(queen)\r\n            if AbilityId.EFFECT_INJECTLARVA not in available_abilities:\r\n                continue # This queen can\'t inject yet, move to the next one.\r\n\r\n            # WORKFLOW STEP 3: FIND VALID TARGET\r\n            # Find a ready townhall that is not already buffed with "Queen\'s Spawn Larva".\r\n            unbuffed_townhalls = self.townhalls.ready.filter(lambda th: not th.has_buff(BuffId.QUEENSPAWNLARVATIMER))\r\n            if not unbuffed_townhalls:\r\n                # No valid targets, maybe creep spread instead?\r\n                # For now, we\'ll just skip.\r\n                continue\r\n\r\n            # Find the closest unbuffed townhall to this queen.\r\n            closest_target = unbuffed_townhalls.closest_to(queen)\r\n\r\n            # WORKFLOW STEP 4: ISSUE COMMAND\r\n            # The queen(...) call creates a UnitCommand object. self.do() executes it.\r\n            await self.do(queen(AbilityId.EFFECT_INJECTLARVA, closest_target))\r\n            print(f"ACTION: Queen {queen.tag} is injecting Hatchery {closest_target.tag}")\r\n\r\n\r\n    async def build_infrastructure(self):\r\n        """A simple helper to build a basic Zerg setup."""\r\n        if self.townhalls and self.townhalls.amount < 2 and self.can_afford(UnitTypeId.HATCHERY):\r\n            await self.expand_now()\r\n        if self.structures(UnitTypeId.SPAWNINGPOOL).amount < 1 and self.can_afford(UnitTypeId.SPAWNINGPOOL):\r\n            await self.build(UnitTypeId.SPAWNINGPOOL, near=self.start_location.position)\r\n        if self.townhalls and self.units(UnitTypeId.QUEEN).amount < self.townhalls.amount and self.can_afford(UnitTypeId.QUEEN):\r\n            self.train(UnitTypeId.QUEEN)\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("BlackburnAIE"),\r\n        [\r\n            Bot(Race.Zerg, MatriarchBot()),\r\n            Computer(Race.Terran, Difficulty.VeryEasy)\r\n        ],\r\n        realtime=True,\r\n    )\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>l});var i=n(6540);const s={},r=i.createContext(s);function a(e){const t=i.useContext(r);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),i.createElement(r.Provider,{value:t},e.children)}}}]);