"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[9893],{813:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>o,default:()=>f,frontMatter:()=>a,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.1 - Writing Efficient Code - Managing APM","title":"7.1 - Writing Efficient Code - Managing APM","description":"As your bot\'s intelligence grows, so does the complexity of its code. Inefficient code is not just a matter of elegance; it can lead to critical performance issues, including game-losing lag and desync bugs. Writing efficient code is about making your bot both fast and stable.","source":"@site/docs/Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.1 - Writing Efficient Code - Managing APM.md","sourceDirName":"Part 3 - Advanced Development/Chapter 7 - Performance and Debugging","slug":"/Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.1 - Writing Efficient Code - Managing APM","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.1 - Writing Efficient Code - Managing APM","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"6.3 - Querying the Game - Checking for Pathing and Abilities","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.3 - Querying the Game - Checking for Pathing and Abilities"},"next":{"title":"7.2 - Common Pitfalls- Desyncs and Stale Data","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.2 - Common Pitfalls- Desyncs and Stale Data"}}');var r=t(4848),s=t(8453);const a={},o=void 0,l={},c=[{value:"<strong>The Performance Landscape</strong>",id:"the-performance-landscape",level:4},{value:"<strong>Core Principles for Efficient Code</strong>",id:"core-principles-for-efficient-code",level:4},{value:"<strong>Developer&#39;s Checklist for Optimization</strong>",id:"developers-checklist-for-optimization",level:4},{value:"<strong>Code Example: The &quot;Optimized&quot; Bot</strong>",id:"code-example-the-optimized-bot",level:4}];function d(e){const n={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"As your bot's intelligence grows, so does the complexity of its code. Inefficient code is not just a matter of elegance; it can lead to critical performance issues, including game-losing lag and desync bugs. Writing efficient code is about making your bot both fast and stable."}),"\n",(0,r.jsxs)(n.p,{children:["A key symptom of inefficient code is abnormally high ",(0,r.jsx)(n.strong,{children:"APM (Actions Per Minute)"}),". While high APM is not a goal, an APM in the tens of thousands is a red flag that your bot is spamming redundant commands."]}),"\n",(0,r.jsx)(n.h4,{id:"the-performance-landscape",children:(0,r.jsx)(n.strong,{children:"The Performance Landscape"})}),"\n",(0,r.jsx)(n.p,{children:"Your bot's performance is a balance between the complexity of its logic and the time it has to execute it."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"+------------------------------------+\r\n|   Your Bot's Logic (on_step)       |\r\n|------------------------------------|\r\n| - Complex calculations             | <--- The more you do, the longer it takes.\r\n| - Looping through many units       |\r\n| - Issuing many commands            |\r\n+------------------------------------+\r\n                 |\r\n                 v\r\n+------------------------------------+\r\n|   Real-world Time Limit per Step   | <--- The game engine will not wait for you.\r\n|      (e.g., ~16ms for 60FPS)       |      If your code is too slow, you miss your turn.\r\n+------------------------------------+\n"})}),"\n",(0,r.jsx)(n.p,{children:"The goal is to fit all necessary logic within this time limit."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"core-principles-for-efficient-code",children:(0,r.jsx)(n.strong,{children:"Core Principles for Efficient Code"})}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Principle"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"The Problem (Inefficient)"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"The Solution (Efficient)"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"1. Avoid Redundant Commands"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Telling a Marine that is already attacking to attack again. This is the #1 cause of high APM."}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Only issue commands to units whose state needs to change (e.g., units that are ",(0,r.jsx)(n.code,{children:"idle"}),")."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"2. Batch Your Actions"})}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Using ",(0,r.jsx)(n.code,{children:"await"})," for each action inside a loop. Each ",(0,r.jsx)(n.code,{children:"await"})," can force a sequential execution within a single step."]}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Issue commands directly (e.g., ",(0,r.jsx)(n.code,{children:"unit.attack(...)"}),"). The library automatically collects all actions and sends them as a single batch at the end of the game step."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"3. Throttle Your Logic"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Checking for a new expansion or a high-level upgrade 60 times per second. This is unnecessary."}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Use the ",(0,r.jsx)(n.code,{children:"iteration"})," counter or ",(0,r.jsx)(n.code,{children:"self.time"})," to run non-urgent logic less frequently (e.g., once every 5-10 seconds)."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:(0,r.jsx)(n.strong,{children:"4. Cache Expensive Calculations"})}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"Re-calculating a complex value (like the perfect wall-off position) on every single game step."}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["Calculate the value once in ",(0,r.jsx)(n.code,{children:"on_start"})," and store the result in a ",(0,r.jsx)(n.code,{children:"self"})," variable (e.g., ",(0,r.jsx)(n.code,{children:"self.wall_position"}),")."]})]})]})]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"developers-checklist-for-optimization",children:(0,r.jsx)(n.strong,{children:"Developer's Checklist for Optimization"})}),"\n",(0,r.jsx)(n.p,{children:"Before finalizing a new piece of logic, review it with this checklist:"}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Is this command necessary?"})," Am I only telling units to do something if they aren't already doing it? (Check ",(0,r.jsx)(n.code,{children:".is_idle"}),")."]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Am I commanding a group?"})," If so, am I just issuing commands directly and letting the library batch them automatically?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Does this need to run every step?"})," Could this logic be throttled to run every few seconds instead?"]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(n.strong,{children:"Is this calculation complex?"})," If so, can I compute it once and cache the result?"]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"code-example-the-optimized-bot",children:(0,r.jsx)(n.strong,{children:'Code Example: The "Optimized" Bot'})}),"\n",(0,r.jsxs)(n.p,{children:["This bot demonstrates all four principles of efficiency. It lets the library batch actions, commands only idle units, throttles its logging, and caches a key strategic position in ",(0,r.jsx)(n.code,{children:"on_start"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'# optimized_bot.py\r\n\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.data import Difficulty, Race\r\nfrom sc2.main import run_game\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\n\r\nclass OptimizedBot(BotAI):\r\n    """A bot that demonstrates core principles of efficient code."""\r\n\r\n    def __init__(self):\r\n        super().__init__()\r\n        # A variable to hold our cached position.\r\n        self.rally_point = None\r\n\r\n    async def on_start(self):\r\n        """Called once at the start. Perfect for caching calculations."""\r\n        # PRINCIPLE 4: CACHE EXPENSIVE CALCULATIONS\r\n        # Calculate a safe rally point behind our main base once.\r\n        self.rally_point = self.start_location.position.towards(\r\n            self.game_info.map_center, -5\r\n        )\r\n        print(f"Rally point cached at: {self.rally_point.rounded}")\r\n\r\n    async def on_step(self, iteration: int):\r\n        # Army management logic.\r\n        await self.manage_army()\r\n        # Non-urgent logic.\r\n        self.manage_logging(iteration)\r\n        # Helper to build our army.\r\n        await self.build_army()\r\n\r\n    async def manage_army(self):\r\n        # PRINCIPLE 1: AVOID REDUNDANT COMMANDS\r\n        # We only select idle marines to give new orders to.\r\n        idle_marines = self.units(UnitTypeId.MARINE).idle\r\n\r\n        if idle_marines.exists:\r\n            # PRINCIPLE 2: BATCH ACTIONS\r\n            # The library automatically batches actions for us. We just issue commands.\r\n            for marine in idle_marines:\r\n                marine.attack(self.enemy_start_locations[0])\r\n\r\n    def manage_logging(self, iteration: int):\r\n        # PRINCIPLE 3: THROTTLE LOGIC\r\n        # This logging will only run once every 10 game seconds.\r\n        # 22.4 is the number of game steps per second on \'Faster\' speed.\r\n        if iteration % round(22.4 * 10) == 0:\r\n            army_count = self.units(UnitTypeId.MARINE).amount\r\n            print(f"[{self.time_formatted}] Army Count: {army_count}. APM: {self.state.score.apm}")\r\n\r\n    async def build_army(self):\r\n        """A simple helper method to produce units for the demo."""\r\n        # Build Supply Depots\r\n        if self.supply_left < 2 and not self.already_pending(UnitTypeId.SUPPLYDEPOT):\r\n            if self.can_afford(UnitTypeId.SUPPLYDEPOT):\r\n                await self.build(UnitTypeId.SUPPLYDEPOT, near=self.townhalls.first.position.towards(self.game_info.map_center, 5))\r\n\r\n        # Build Barracks\r\n        if self.structures(UnitTypeId.BARRACKS).amount < 3 and not self.already_pending(UnitTypeId.BARRACKS):\r\n            if self.can_afford(UnitTypeId.BARRACKS):\r\n                await self.build(UnitTypeId.BARRACKS, near=self.townhalls.first.position.towards(self.game_info.map_center, 5))\r\n        \r\n        # Train Marines\r\n        idle_barracks = self.structures(UnitTypeId.BARRACKS).ready.idle\r\n        if idle_barracks.exists:\r\n            if self.can_afford(UnitTypeId.MARINE) and self.supply_left > 0:\r\n                # Command the first idle barracks to train a marine.\r\n                idle_barracks.first.train(UnitTypeId.MARINE)\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("GresvanAIE"),\r\n        [\r\n            Bot(Race.Terran, OptimizedBot()),\r\n            Computer(Race.Zerg, Difficulty.Medium)\r\n        ],\r\n        realtime=False, # Run without graphics to see performance.\r\n    )\n'})})]})}function f(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);