"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[2936],{2206:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.3 - Understanding Units- The Unit Object","title":"4.3 - Understanding Units- The Unit Object","description":"Every single entity on the battlefield\u2014from a Marine to a mineral patch, from a Pylon to a flying Overlord\u2014is represented in your code as a Unit object. This is the most fundamental data structure in python-sc2. It is both a data container and an actor: it holds all the information about an entity, and it is the object you use to issue it commands.","source":"@site/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.3 - Understanding Units- The Unit Object.md","sourceDirName":"Part 2 - Core Concepts/Chapter 4 - Reading the Game State","slug":"/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.3 - Understanding Units- The Unit Object","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.3 - Understanding Units- The Unit Object","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"4.2 - Dynamic Info- Minerals, Supply, and Time","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.2 - Dynamic Info- Minerals, Supply, and Time"},"next":{"title":"4.4 - Managing Groups- The Units Collection","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.4 - Managing Groups- The Units Collection"}}');var i=n(4848),r=n(8453);const o={},l=void 0,a={},d=[{value:"<strong>A Mental Model: The <code>Unit</code> as a Class</strong>",id:"a-mental-model-the-unit-as-a-class",level:4},{value:"<strong>How to Get a <code>Unit</code> Object</strong>",id:"how-to-get-a-unit-object",level:4},{value:"<strong>Key <code>Unit</code> Attributes: A Developer&#39;s Reference</strong>",id:"key-unit-attributes-a-developers-reference",level:4},{value:"<strong>A Developer&#39;s Checklist for Using a <code>Unit</code></strong>",id:"a-developers-checklist-for-using-a-unit",level:4},{value:"<strong>Code Example: The Field Commander Bot</strong>",id:"code-example-the-field-commander-bot",level:4}];function c(e){const t={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Every single entity on the battlefield\u2014from a Marine to a mineral patch, from a Pylon to a flying Overlord\u2014is represented in your code as a ",(0,i.jsx)(t.code,{children:"Unit"})," object. This is the most fundamental data structure in ",(0,i.jsx)(t.code,{children:"python-sc2"}),". It is both a data container and an actor: it holds all the information about an entity, and it is the object you use to issue it commands."]}),"\n",(0,i.jsxs)(t.p,{children:["Mastering the ",(0,i.jsx)(t.code,{children:"Unit"})," object is non-negotiable. It is how you will read the battlefield, manage your base, and control your army."]}),"\n",(0,i.jsx)(t.h4,{id:"a-mental-model-the-unit-as-a-class",children:(0,i.jsxs)(t.strong,{children:["A Mental Model: The ",(0,i.jsx)(t.code,{children:"Unit"})," as a Class"]})}),"\n",(0,i.jsx)(t.p,{children:"Think of every unit in the game as an instance of a class. The object holds the unit's current state and provides methods to change that state."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:'       +------------------------------------+\r\n       |         Unit (e.g., Marine)        |\r\n       |====================================|\r\n       |          -- Properties --          |  <-- Data you can READ\r\n       |   name: "Marine"                   |\r\n       |   health: 45                       |\r\n       |   position: Point2(34.5, 67.5)     |\r\n       |   is_idle: True                    |\r\n       |   ...                              |\r\n       |------------------------------------|\r\n       |           -- Methods --            |  <-- Actions you can CALL\r\n       |   + attack(target)                 |\r\n       |   + move(position)                 |\r\n       |   + hold_position()                |\r\n       |   ...                              |\r\n       +------------------------------------+\n'})}),"\n",(0,i.jsx)(t.h4,{id:"how-to-get-a-unit-object",children:(0,i.jsxs)(t.strong,{children:["How to Get a ",(0,i.jsx)(t.code,{children:"Unit"})," Object"]})}),"\n",(0,i.jsxs)(t.p,{children:["You will almost never create a ",(0,i.jsx)(t.code,{children:"Unit"})," object manually. Instead, you will retrieve them from the game state using the helper properties on ",(0,i.jsx)(t.code,{children:"self"}),"."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:"# Get a single Unit object representing your first townhall.\r\nmy_townhall = self.townhalls.first\r\n\r\n# Get a single Unit object representing a random idle worker.\r\nidle_worker = self.workers.idle.random_or(None)\r\n\r\n# Loop through a collection of Unit objects.\r\nfor marine in self.units(UnitTypeId.MARINE):\r\n    # 'marine' is a Unit object.\r\n    if marine.is_idle:\r\n        print(f\"Found an idle marine with tag {marine.tag}\")\n"})}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h4,{id:"key-unit-attributes-a-developers-reference",children:(0,i.jsxs)(t.strong,{children:["Key ",(0,i.jsx)(t.code,{children:"Unit"})," Attributes: A Developer's Reference"]})}),"\n",(0,i.jsxs)(t.p,{children:["Once you have a ",(0,i.jsx)(t.code,{children:"Unit"})," object, you can inspect its attributes to make decisions."]}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Category"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Attribute"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Data Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Use Case in a Project"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Identity"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"name"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"type_id"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"tag"})]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"str"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"UnitTypeId"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"int"})]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsxs)(t.strong,{children:[(0,i.jsx)(t.code,{children:"type_id"})," is best for checks."]})," Use ",(0,i.jsx)(t.code,{children:"tag"})," to uniquely identify a unit throughout a match."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Vitals"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"health"}),", ",(0,i.jsx)(t.code,{children:"health_max"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"shield"}),", ",(0,i.jsx)(t.code,{children:"shield_max"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"energy"}),", ",(0,i.jsx)(t.code,{children:"energy_max"})]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"float"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Check health to decide if a unit should retreat. Check energy to see if a caster can use an ability."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Position"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"position"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"radius"})]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"Point2"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"float"})]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"position"})," is essential for all movement and distance calculations."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Combat"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"weapon_cooldown"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"is_attacking"})]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"float"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"bool"})]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"weapon_cooldown"})," is the key to advanced micro-management like stutter-stepping."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"State Flags"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"is_idle"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"is_flying"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"is_powered"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"is_burrowed"})]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"bool"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["These booleans are the most common conditions in ",(0,i.jsx)(t.code,{children:"if"})," statements for managing unit behavior."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Ownership"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"is_yours"}),(0,i.jsx)("br",{}),(0,i.jsx)(t.code,{children:"is_enemy"})]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"bool"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Crucial for distinguishing your units from the opponent's."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h4,{id:"a-developers-checklist-for-using-a-unit",children:(0,i.jsxs)(t.strong,{children:["A Developer's Checklist for Using a ",(0,i.jsx)(t.code,{children:"Unit"})]})}),"\n",(0,i.jsxs)(t.p,{children:["When your code gets a ",(0,i.jsx)(t.code,{children:"Unit"})," object, this is your thought process:"]}),"\n",(0,i.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"1. Identify It:"})," What is this unit? (",(0,i.jsx)(t.code,{children:"if unit.type_id == UnitTypeId.MARINE:"}),")"]}),"\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"2. Check Its State:"})," Is it doing what it should be? (",(0,i.jsx)(t.code,{children:"if unit.is_idle:"}),")"]}),"\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"3. Assess Its Condition:"})," Is it healthy enough to fight? (",(0,i.jsx)(t.code,{children:"if (unit.health / unit.health_max) < 0.4:"}),")"]}),"\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"4. Give It an Order:"})," If it's not doing the right thing, issue a command (",(0,i.jsx)(t.code,{children:"unit.attack(...)"}),")."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h4,{id:"code-example-the-field-commander-bot",children:(0,i.jsx)(t.strong,{children:"Code Example: The Field Commander Bot"})}),"\n",(0,i.jsxs)(t.p,{children:['This bot demonstrates the full "Sense-Think-Act" cycle on individual ',(0,i.jsx)(t.code,{children:"Unit"})," objects. It finds idle Marines and sends them to attack, and pulls back any Marine that is badly damaged."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# field_commander_bot.py\r\n\r\nimport sc2\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.race import Race, Difficulty\r\n\r\nclass FieldCommanderBot(BotAI):\r\n    """\r\n    Demonstrates inspecting and commanding individual Unit objects.\r\n    """\r\n    async def on_step(self, iteration: int):\r\n        # We need a target to attack.\r\n        target = self.enemy_start_locations[0]\r\n        if self.enemy_structures.exists:\r\n            target = self.enemy_structures.random.position\r\n\r\n        # Loop through all of our Marine unit objects.\r\n        for marine in self.units(UnitTypeId.MARINE):\r\n            # SENSE: Check the health and state of this specific marine.\r\n            is_hurt = marine.health / marine.health_max < 0.5\r\n            is_idle = marine.is_idle\r\n\r\n            # THINK & ACT: Make a decision based on the unit\'s state.\r\n            if is_hurt:\r\n                # If hurt, pull it back to our start location.\r\n                # The \'move\' command is on the Unit object.\r\n                marine.move(self.start_location)\r\n            elif is_idle:\r\n                # If idle and healthy, send it to attack.\r\n                # The \'attack\' command is on the Unit object.\r\n                marine.attack(target)\r\n\r\n\r\nif __name__ == "__main__":\r\n    sc2.run_game(\r\n        sc2.maps.get("BlackburnAIE"),\r\n        [\r\n            Bot(Race.Terran, FieldCommanderBot()),\r\n            Computer(Race.Zerg, Difficulty.Easy)\r\n        ],\r\n        realtime=True,\r\n    )\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(6540);const i={},r=s.createContext(i);function o(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);