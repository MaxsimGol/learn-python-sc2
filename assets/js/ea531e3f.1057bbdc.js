"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[1384],{3306:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>n,toc:()=>a});const n=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.1 - The Heart of Your Bot","title":"3.1 - The Heart of Your Bot","description":"At the center of every project is your main bot class. This class is not just a container for code; it\'s the brain of your entire operation. To write effective bots, you must first understand the structure of this class and the powerful \\"API contract\\" it fulfills by inheriting from the library\'s BotAI.","source":"@site/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.1 - The Heart of Your Bot.md","sourceDirName":"Part 2 - Core Concepts/Chapter 3 - The BotAI Class","slug":"/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.1 - The Heart of Your Bot","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.1 - The Heart of Your Bot","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"2.4 - Your First Hello, World Bot","permalink":"/learn-python-sc2/docs/Part 1 - Getting Started/Chapter 2 - Installation & First Bot/2.4 - Your First Hello, World Bot"},"next":{"title":"3.2 - The Game Loop","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.2 - The Game Loop"}}');var r=s(4848),l=s(8453);const i={},o=void 0,c={},a=[{value:"<strong>The Inheritance Structure</strong>",id:"the-inheritance-structure",level:4},{value:"<strong>The <code>BotAI</code> Contract: What You Get via <code>self</code></strong>",id:"the-botai-contract-what-you-get-via-self",level:4},{value:"<strong>Code Example: A Smarter Skeleton</strong>",id:"code-example-a-smarter-skeleton",level:4}];function d(e){const t={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["At the center of every project is your main bot class. This class is not just a container for code; it's the brain of your entire operation. To write effective bots, you must first understand the structure of this class and the powerful \"API contract\" it fulfills by inheriting from the library's ",(0,r.jsx)(t.code,{children:"BotAI"}),"."]}),"\n",(0,r.jsxs)(t.p,{children:["Think of ",(0,r.jsx)(t.code,{children:"BotAI"})," as the standard cockpit of a complex vehicle. It provides all the essential instruments, displays, and controls. Your job is to create a pilot\u2014your bot class\u2014that inherits this cockpit and uses it to make intelligent decisions."]}),"\n",(0,r.jsx)(t.h4,{id:"the-inheritance-structure",children:(0,r.jsx)(t.strong,{children:"The Inheritance Structure"})}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"[ burnysc2 Library ]                  [ Your Code: my_bot.py ]\r\n+---------------------+\r\n|       BotAI         |\r\n|---------------------|               +----------------------+\r\n| - self.state        |               |       MyBot          |\r\n| - self.game_info    | <-----------+ |----------------------|\r\n| - self.time         |   (Inherits)  | + on_start()         |\r\n| - self.minerals     |               | + on_step()          |\r\n| - self.units        |               | + on_end()           |\r\n| ...and many more    |               +----------------------+\r\n+---------------------+\n"})}),"\n",(0,r.jsxs)(t.p,{children:["By writing ",(0,r.jsx)(t.code,{children:"class MyBot(BotAI):"}),", you are signing a contract. You agree to implement the logic, and in return, ",(0,r.jsx)(t.code,{children:"BotAI"})," provides you with a rich set of tools and guarantees that certain methods in your class (",(0,r.jsx)(t.code,{children:"on_start"}),", ",(0,r.jsx)(t.code,{children:"on_step"}),", etc.) will be called at the appropriate times."]}),"\n",(0,r.jsx)(t.h4,{id:"the-botai-contract-what-you-get-via-self",children:(0,r.jsxs)(t.strong,{children:["The ",(0,r.jsx)(t.code,{children:"BotAI"})," Contract: What You Get via ",(0,r.jsx)(t.code,{children:"self"})]})}),"\n",(0,r.jsxs)(t.p,{children:["Inheriting from ",(0,r.jsx)(t.code,{children:"BotAI"})," gives your class access to a host of properties and methods through the ",(0,r.jsx)(t.code,{children:"self"})," keyword. These can be grouped into two categories: ",(0,r.jsx)(t.strong,{children:"Sensing"})," (reading the game state) and ",(0,r.jsx)(t.strong,{children:"Acting"})," (executing logic at specific times)."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Category"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Component"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"How You Use It (Example)"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Its Purpose"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Sensing"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Core Data Objects"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"self.state"})," / ",(0,r.jsx)(t.code,{children:"self.game_info"})]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Provides the raw, unfiltered snapshot of all game data. This is the ultimate source of truth."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"}}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Convenience Helpers"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"self.units"}),", ",(0,r.jsx)(t.code,{children:"self.workers"}),", ",(0,r.jsx)(t.code,{children:"self.enemy_structures"})]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Clean, readable shortcuts to filtered lists of units from ",(0,r.jsx)(t.code,{children:"self.state"}),". Far easier to use."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"}}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Resource Properties"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"self.minerals"}),", ",(0,r.jsx)(t.code,{children:"self.vespene"}),", ",(0,r.jsx)(t.code,{children:"self.supply_left"})]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Instant, direct access to the most commonly needed resource values."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"}}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Time & Iteration"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"self.time"}),", ",(0,r.jsx)(t.code,{children:"self.time_formatted"}),", ",(0,r.jsx)(t.code,{children:"iteration"})]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["Track game progress. ",(0,r.jsx)(t.code,{children:"self.time"})," (in seconds) is best for time-based logic."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Acting"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Lifecycle Methods"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"async def on_start(self):"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:['A "hook" that runs ',(0,r.jsx)(t.strong,{children:"once"})," at the very beginning of the game. Perfect for initial setup."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"}}),(0,r.jsx)(t.td,{style:{textAlign:"left"}}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"async def on_step(self, iteration):"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["The main game loop. Runs ",(0,r.jsx)(t.strong,{children:"repeatedly"})," (many times per second). Your core logic lives here."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"}}),(0,r.jsx)(t.td,{style:{textAlign:"left"}}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"async def on_end(self, result):"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:['A "hook" that runs ',(0,r.jsx)(t.strong,{children:"once"})," after the game has finished. Ideal for cleanup or analysis."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"}}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Event-Driven Methods"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"on_unit_created"}),", ",(0,r.jsx)(t.code,{children:"on_building_construction_complete"})]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Methods that run only when a specific, named event occurs in the game."})]})]})]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"code-example-a-smarter-skeleton",children:(0,r.jsx)(t.strong,{children:"Code Example: A Smarter Skeleton"})}),"\n",(0,r.jsxs)(t.p,{children:["This example demonstrates how to properly use the ",(0,r.jsx)(t.code,{children:"BotAI"})," contract to build a simple, readable bot skeleton. Note the use of ",(0,r.jsx)(t.code,{children:"self.time"})," for reliable, time-based checks."]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Checklist for This Bot:"})}),"\n",(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Inherit from ",(0,r.jsx)(t.code,{children:"BotAI"}),"."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Use ",(0,r.jsx)(t.code,{children:"on_start"})," for a one-time setup message."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Use ",(0,r.jsx)(t.code,{children:"on_step"})," for continuous, looping logic."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Access helper properties like ",(0,r.jsx)(t.code,{children:"self.time"}),", ",(0,r.jsx)(t.code,{children:"self.supply_used"}),", and ",(0,r.jsx)(t.code,{children:"self.townhalls"}),"."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# smart_skeleton.py\r\n\r\nfrom sc2 import main\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.data import Race, Difficulty\r\n\r\nclass SmartBot(BotAI):\r\n    """\r\n    A bot skeleton that demonstrates the correct use of the BotAI class.\r\n    """\r\n    def __init__(self):\r\n        super().__init__()\r\n        # Initialize a variable to track the last time we printed status.\r\n        self.last_log_time = 0\r\n\r\n    async def on_start(self):\r\n        """Called once at the start."""\r\n        print(f"Game started on map: {self.game_info.map_name}")\r\n\r\n    async def on_step(self, iteration: int):\r\n        """Called on every game step. This is where the main logic lives."""\r\n\r\n        # Log current status every 5 seconds of game time.\r\n        # Using self.time is more reliable than using the iteration number.\r\n        if self.time - self.last_log_time >= 5:\r\n            self.last_log_time = self.time\r\n            supply_used = self.supply_used\r\n            supply_cap = self.supply_cap\r\n            townhall_count = self.townhalls.amount\r\n\r\n            print(f"Time: {self.time_formatted} | Townhalls: {townhall_count} | Supply: {supply_used}/{supply_cap}")\r\n\r\n            # Example of a simple decision:\r\n            if supply_used > supply_cap * 0.8 and self.can_afford(UnitTypeId.SUPPLYDEPOT):\r\n                print("ACTION: Supply is high, should build a Supply Depot.")\r\n\r\n\r\nif __name__ == "__main__":\r\n    main.run_game(\r\n        main.maps.get("BlackburnAIE"),\r\n        [\r\n            Bot(Race.Terran, SmartBot()),\r\n            Computer(Race.Zerg, Difficulty.Easy),\r\n        ],\r\n        realtime=True,\r\n    )\n'})})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,s)=>{s.d(t,{R:()=>i,x:()=>o});var n=s(6540);const r={},l=n.createContext(r);function i(e){const t=n.useContext(l);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),n.createElement(l.Provider,{value:t},e.children)}}}]);