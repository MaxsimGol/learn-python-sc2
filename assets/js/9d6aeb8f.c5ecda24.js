"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[8392],{1961:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.2 - Basic Commands- Attack, Move, Stop","title":"5.2 - Basic Commands- Attack, Move, Stop","description":"5.2. Basic Commands: Attack, Move, and Stop","source":"@site/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.2 - Basic Commands- Attack, Move, Stop.md","sourceDirName":"Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions","slug":"/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.2 - Basic Commands- Attack, Move, Stop","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.2 - Basic Commands- Attack, Move, Stop","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"5.1 - The Core of Control","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.1 - The Core of Control"},"next":{"title":"5.3 - Worker Commands- Gather and Build","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.3 - Worker Commands- Gather and Build"}}');var i=n(4848),r=n(8453);const a={},o=void 0,l={},c=[{value:"<strong>5.2. Basic Commands: Attack, Move, and Stop</strong>",id:"52-basic-commands-attack-move-and-stop",level:3},{value:"<strong>A Tactical Comparison of Core Commands</strong>",id:"a-tactical-comparison-of-core-commands",level:4},{value:"<strong>Command Deep Dive</strong>",id:"command-deep-dive",level:4},{value:"<strong>A Developer&#39;s Tactical Checklist</strong>",id:"a-developers-tactical-checklist",level:4},{value:"<strong>Code Example: The Tactical Officer Bot</strong>",id:"code-example-the-tactical-officer-bot",level:4}];function d(e){const t={code:"code",h3:"h3",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(t.h3,{id:"52-basic-commands-attack-move-and-stop",children:(0,i.jsx)(t.strong,{children:"5.2. Basic Commands: Attack, Move, and Stop"})}),"\n",(0,i.jsxs)(t.p,{children:["These four commands are the fundamental verbs of StarCraft II. They form the basis of all unit control, from simple army movements to complex micro-management. Every command is a method on a ",(0,i.jsx)(t.code,{children:"Unit"})," object and, because it's a network action, must be ",(0,i.jsx)(t.code,{children:"await"}),"ed or batched with ",(0,i.jsx)(t.code,{children:"self.do_actions()"}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"a-tactical-comparison-of-core-commands",children:(0,i.jsx)(t.strong,{children:"A Tactical Comparison of Core Commands"})}),"\n",(0,i.jsx)(t.p,{children:"Choosing the right command depends entirely on your tactical goal."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Command"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"unit.attack(target)"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"unit.move(target)"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"unit.stop()"})}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"unit.hold_position()"})})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Tactical Role"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.strong,{children:"Offensive."})," Engages targets and pursues them."]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.strong,{children:"Repositioning."})," Moves safely from A to B."]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.strong,{children:"Full Stop."})," Cancels all actions."]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.strong,{children:"Defensive."})," Holds a position and fires on enemies in range."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Engages Enemies?"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.strong,{children:"Yes."})," Automatically fights any enemies encountered."]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.strong,{children:"No."})," Will ignore enemies and continue to its destination."]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.strong,{children:"No."})," Will not auto-acquire targets."]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.strong,{children:"Yes."})," Will fire on enemies in range but will not chase them."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Target Type"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"Unit"})," or ",(0,i.jsx)(t.code,{children:"Point2"})]}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.code,{children:"Point2"})," only"]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"None"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"None"})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"Primary Use Case"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,i.jsx)(t.strong,{children:"Attack-Moving an army."})," Standard way to advance on the enemy."]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Retreating damaged units or moving workers."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Arranging units precisely for an ambush or spell."}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Setting up a defensive line at a chokepoint."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h4,{id:"command-deep-dive",children:(0,i.jsx)(t.strong,{children:"Command Deep Dive"})}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsxs)(t.strong,{children:["1. The ",(0,i.jsx)(t.code,{children:"attack"})," Command"]}),"\r\nThis is your primary tool for aggression."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"await unit.attack(enemy_unit)"}),": The unit will hunt down and attack a specific enemy."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"await unit.attack(map_location)"}),": The unit will ",(0,i.jsx)(t.strong,{children:"attack-move"}),". This is the most common command for an army. It moves towards a location and automatically fights any hostiles it meets along the way."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsxs)(t.strong,{children:["2. The ",(0,i.jsx)(t.code,{children:"move"})," Command"]}),"\r\nThis is for pure, uninterruptible movement."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"await unit.move(map_location)"}),": The unit will travel to the location, ignoring all distractions. If it takes damage, it will not retaliate. This is essential for retreating."]}),"\n"]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsxs)(t.strong,{children:["3. The ",(0,i.jsx)(t.code,{children:"stop"})," and ",(0,i.jsx)(t.code,{children:"hold_position"})," Commands"]}),"\r\nThese are for static positioning."]}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"await unit.stop()"}),": Cancels the unit's current order. It will stand still and do nothing."]}),"\n",(0,i.jsxs)(t.li,{children:[(0,i.jsx)(t.code,{children:"await unit.hold_position()"}),": The superior defensive command. The unit stands still but will fire on any enemies that enter its weapon range, making it perfect for defending a ramp."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h4,{id:"a-developers-tactical-checklist",children:(0,i.jsx)(t.strong,{children:"A Developer's Tactical Checklist"})}),"\n",(0,i.jsx)(t.p,{children:"When controlling a unit, ask yourself:"}),"\n",(0,i.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"What is my goal?"})," (Aggression, Retreat, Defense)"]}),"\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"Should this unit fight if it meets an enemy?"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Yes -> Use ",(0,i.jsx)(t.code,{children:"attack"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["No -> Use ",(0,i.jsx)(t.code,{children:"move"}),"."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"Should this unit hold its ground?"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsxs)(t.li,{children:["Yes, and fire back -> Use ",(0,i.jsx)(t.code,{children:"hold_position"}),"."]}),"\n",(0,i.jsxs)(t.li,{children:["Yes, and do nothing -> Use ",(0,i.jsx)(t.code,{children:"stop"}),"."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h4,{id:"code-example-the-tactical-officer-bot",children:(0,i.jsx)(t.strong,{children:"Code Example: The Tactical Officer Bot"})}),"\n",(0,i.jsxs)(t.p,{children:["This bot demonstrates making tactical decisions for its army. It will send its main force to attack-move, but if any unit becomes heavily damaged, it will be ordered to ",(0,i.jsx)(t.code,{children:"move"})," back to a safe location."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# tactical_officer_bot.py\r\n\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.data import Difficulty, Race\r\nfrom sc2.main import run_game\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.units import Units\r\n\r\nclass TacticalOfficerBot(BotAI):\r\n    """\r\n    A bot that makes tactical decisions using attack and move commands.\r\n    """\r\n    async def on_step(self, iteration: int):\r\n        # First, ensure we have an army to command.\r\n        await self.build_army()\r\n\r\n        all_marines: Units = self.units(UnitTypeId.MARINE)\r\n        if not all_marines.exists:\r\n            return\r\n\r\n        # Define strategic points for our commands.\r\n        attack_destination = self.enemy_start_locations[0]\r\n        safe_retreat_point = self.start_location.towards(self.game_info.map_center, 10)\r\n\r\n        # We will batch our commands for performance.\r\n        actions = []\r\n\r\n        # Loop through every marine and make a tactical decision.\r\n        for marine in all_marines:\r\n            is_damaged = marine.health_percentage < 0.5\r\n\r\n            # TACTICAL DECISION:\r\n            if is_damaged:\r\n                # Goal: Retreat. The unit should not fight.\r\n                # Command: move()\r\n                actions.append(marine.move(safe_retreat_point))\r\n            else:\r\n                # Goal: Aggression. The unit should fight on its way to the target.\r\n                # Command: attack() (attack-move)\r\n                actions.append(marine.attack(attack_destination))\r\n\r\n        # Execute all collected commands in a single batch.\r\n        if actions:\r\n            await self.do_actions(actions)\r\n\r\n    async def build_army(self):\r\n        """A simple helper method to produce units for the demo."""\r\n        if self.supply_left < 2 and not self.already_pending(UnitTypeId.SUPPLYDEPOT):\r\n            if self.can_afford(UnitTypeId.SUPPLYDEPOT):\r\n                await self.build(UnitTypeId.SUPPLYDEPOT, near=self.start_location.towards(self.game_info.map_center, 5))\r\n            return\r\n        if not self.structures(UnitTypeId.BARRACKS).exists and not self.already_pending(UnitTypeId.BARRACKS):\r\n            if self.can_afford(UnitTypeId.BARRACKS):\r\n                await self.build(UnitTypeId.BARRACKS, near=self.start_location.towards(self.game_info.map_center, 8))\r\n            return\r\n\r\n        if self.can_afford(UnitTypeId.MARINE):\r\n            train_actions = []\r\n            for barracks in self.structures(UnitTypeId.BARRACKS).ready.idle:\r\n                train_actions.append(barracks.train(UnitTypeId.MARINE))\r\n            if train_actions:\r\n                await self.do_actions(train_actions)\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("BlackburnAIE"),\r\n        [\r\n            Bot(Race.Terran, TacticalOfficerBot()),\r\n            Computer(Race.Zerg, Difficulty.Easy)\r\n        ],\r\n        realtime=True,\r\n    )\n'})})]})}function h(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);