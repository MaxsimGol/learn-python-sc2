"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[192],{2503:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>a,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.1 - Macro-management - Expanding and Managing Your Economy","title":"6.1 - Macro-management - Expanding and Managing Your Economy","description":"Macro-management (\\"macro\\") is the art of economy. It is a high-level, strategic process focused on resource collection, base expansion, and infrastructure development. A bot with superior macro can often defeat a bot with superior unit control (\\"micro\\") simply by producing a larger, better-equipped army.","source":"@site/docs/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.1 - Macro-management - Expanding and Managing Your Economy.md","sourceDirName":"Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot","slug":"/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.1 - Macro-management - Expanding and Managing Your Economy","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.1 - Macro-management - Expanding and Managing Your Economy","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"5.5 - Using Special Abilities","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.5 - Using Special Abilities"},"next":{"title":"6.2 - Micro-management - Controlling Units in Combat","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.2 - Micro-management - Controlling Units in Combat"}}');var o=r(4848),s=r(8453);const a={},i=void 0,l={},c=[{value:"<strong>The Macro Engine: A System of Priorities</strong>",id:"the-macro-engine-a-system-of-priorities",level:4},{value:"<strong>The Three Pillars of Economic Management</strong>",id:"the-three-pillars-of-economic-management",level:4},{value:"<strong>Code Architecture: Separating Concerns</strong>",id:"code-architecture-separating-concerns",level:4},{value:"<strong>Code Example: The &quot;Economic Engine&quot; Bot</strong>",id:"code-example-the-economic-engine-bot",level:4}];function d(e){const n={code:"code",h4:"h4",hr:"hr",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(n.p,{children:'Macro-management ("macro") is the art of economy. It is a high-level, strategic process focused on resource collection, base expansion, and infrastructure development. A bot with superior macro can often defeat a bot with superior unit control ("micro") simply by producing a larger, better-equipped army.'}),"\n",(0,o.jsx)(n.p,{children:"This section moves beyond individual commands and into the realm of building a robust economic engine that will power your bot's war machine."}),"\n",(0,o.jsx)(n.h4,{id:"the-macro-engine-a-system-of-priorities",children:(0,o.jsx)(n.strong,{children:"The Macro Engine: A System of Priorities"})}),"\n",(0,o.jsx)(n.p,{children:"A strong macro bot doesn't just perform actions; it manages a system of competing priorities. At any given moment, it must decide what is the most important use of its resources."}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{children:"+---------------------------------+\r\n|      Incoming Resources         | (Minerals & Vespene)\r\n| (self.minerals, self.vespene)   |\r\n+---------------------------------+\r\n                 |\r\n                 v\r\n+---------------------------------+\r\n|     The Macro Engine (Your Bot) |\r\n|---------------------------------|\r\n| #1: Manage Supply               | <-- Top Priority: Never get supply blocked.\r\n| #2: Produce Workers             | <-- The foundation of your economy.\r\n| #3: Expand to New Bases         | <-- Increases your income ceiling.\r\n| #4: Build Production/Tech       | <-- Unlocks new units and upgrades.\r\n| #5: Build Army Units            | <-- Your win condition.\r\n+---------------------------------+\n"})}),"\n",(0,o.jsxs)(n.p,{children:["Your ",(0,o.jsx)(n.code,{children:"on_step"})," method should be structured to reflect this hierarchy, ensuring that critical economic tasks are always handled before less urgent ones."]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"the-three-pillars-of-economic-management",children:(0,o.jsx)(n.strong,{children:"The Three Pillars of Economic Management"})}),"\n",(0,o.jsxs)(n.table,{children:[(0,o.jsx)(n.thead,{children:(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.th,{style:{textAlign:"left"},children:"Pillar"}),(0,o.jsx)(n.th,{style:{textAlign:"left"},children:"Core Principle"}),(0,o.jsx)(n.th,{style:{textAlign:"left"},children:"Implementation Checklist"})]})}),(0,o.jsxs)(n.tbody,{children:[(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"left"},children:(0,o.jsx)(n.strong,{children:"1. Resource Velocity"})}),(0,o.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,o.jsx)(n.strong,{children:"Keep your money moving."})," A large bank of unspent resources is a sign of inefficiency. Your goal is to have a high rate of spending."]}),(0,o.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,o.jsx)(n.code,{children:"[ ]"})," Is my production always queued?",(0,o.jsx)("br",{}),(0,o.jsx)(n.code,{children:"[ ]"})," Am I building tech as soon as I can afford it?",(0,o.jsx)("br",{}),(0,o.jsx)(n.code,{children:"[ ]"})," Are my resources consistently low?"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"left"},children:(0,o.jsx)(n.strong,{children:"2. Worker Saturation"})}),(0,o.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,o.jsx)(n.strong,{children:"Build workers constantly, and assign them correctly."}),' The goal is to "saturate" each base with the optimal number of workers.']}),(0,o.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,o.jsx)(n.code,{children:"[ ]"})," Am I training workers from all idle townhalls?",(0,o.jsx)("br",{}),(0,o.jsx)(n.code,{children:"[ ]"})," Do I stop at a target worker count (e.g., 66-70)?",(0,o.jsx)("br",{}),(0,o.jsx)(n.code,{children:"[ ]"})," Are my vespene geysers fully staffed (3 workers each)?"]})]}),(0,o.jsxs)(n.tr,{children:[(0,o.jsx)(n.td,{style:{textAlign:"left"},children:(0,o.jsx)(n.strong,{children:"3. Base Expansion"})}),(0,o.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,o.jsx)(n.strong,{children:"Secure more income."})," To build a larger army, you must expand to new mineral lines."]}),(0,o.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,o.jsx)(n.code,{children:"[ ]"})," Do I have a clear trigger for when to expand? (e.g., at a certain time, supply, or tech level).",(0,o.jsx)("br",{}),(0,o.jsx)(n.code,{children:"[ ]"})," Am I using ",(0,o.jsx)(n.code,{children:"self.expand_now()"})," for easy, reliable expansion?"]})]})]})]}),"\n",(0,o.jsx)(n.hr,{}),"\n",(0,o.jsx)(n.h4,{id:"code-architecture-separating-concerns",children:(0,o.jsx)(n.strong,{children:"Code Architecture: Separating Concerns"})}),"\n",(0,o.jsxs)(n.p,{children:["As your bot's logic grows, a single, massive ",(0,o.jsx)(n.code,{children:"on_step"})," method becomes unmanageable. A professional approach is to separate concerns into different classes or methods. Here, we'll create a ",(0,o.jsx)(n.code,{children:"MacroManager"})," to handle all economic decisions."]}),"\n",(0,o.jsx)(n.h4,{id:"code-example-the-economic-engine-bot",children:(0,o.jsx)(n.strong,{children:'Code Example: The "Economic Engine" Bot'})}),"\n",(0,o.jsxs)(n.p,{children:["This bot demonstrates a clean, structured approach to macro. It uses a dedicated ",(0,o.jsx)(n.code,{children:"MacroManager"})," class to handle its economy, following a strict priority list to ensure it grows efficiently and robustly."]}),"\n",(0,o.jsx)(n.pre,{children:(0,o.jsx)(n.code,{className:"language-python",children:'# economic_engine_bot.py\r\n\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.data import Difficulty, Race\r\nfrom sc2.main import run_game\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\n\r\n# A class dedicated to handling all macroeconomic decisions.\r\nclass MacroManager:\r\n    def __init__(self, bot: BotAI):\r\n        self.bot = bot\r\n        self.target_worker_count = 70\r\n\r\n    async def manage(self):\r\n        # The order of these calls defines our bot\'s priorities.\r\n        self.manage_supply()\r\n        self.manage_worker_production()\r\n        await self.manage_gas_collection()\r\n        await self.manage_expansion()\r\n        self.manage_production_buildings()\r\n        self.manage_army_production()\r\n\r\n    def manage_supply(self):\r\n        """Builds supply depots when needed."""\r\n        if self.bot.supply_left < 5 and self.bot.already_pending(UnitTypeId.SUPPLYDEPOT) == 0:\r\n            if self.bot.can_afford(UnitTypeId.SUPPLYDEPOT):\r\n                worker = self.bot.workers.random_or_none\r\n                if worker:\r\n                    worker.build(UnitTypeId.SUPPLYDEPOT, near=self.bot.start_location.towards(self.bot.game_info.map_center, 5))\r\n\r\n    def manage_worker_production(self):\r\n        """Trains workers from idle townhalls."""\r\n        if self.bot.workers.amount < self.target_worker_count:\r\n            for townhall in self.bot.townhalls.idle:\r\n                if self.bot.can_afford(UnitTypeId.SCV):\r\n                    townhall.train(UnitTypeId.SCV)\r\n\r\n    async def manage_gas_collection(self):\r\n        """Builds refineries and saturates them with workers."""\r\n        # Build refineries\r\n        for townhall in self.bot.townhalls.ready:\r\n            vespene_geysers = self.bot.vespene_geysers.closer_than(10, townhall)\r\n            for geyser in vespene_geysers:\r\n                if not self.bot.structures.closer_than(1.0, geyser).exists and self.bot.can_afford(UnitTypeId.REFINERY):\r\n                    worker = self.bot.workers.closest_to(geyser)\r\n                    if worker:\r\n                        worker.build(UnitTypeId.REFINERY, geyser)\r\n                        break # Prevents assigning multiple workers to build the same refinery\r\n        # Saturate refineries\r\n        for refinery in self.bot.structures(UnitTypeId.REFINERY).ready:\r\n            if refinery.assigned_harvesters < refinery.ideal_harvesters:\r\n                worker = self.bot.workers.closest_to(refinery)\r\n                if worker:\r\n                    worker.gather(refinery)\r\n\r\n    async def manage_expansion(self):\r\n        """Expands to a new base when conditions are met."""\r\n        if self.bot.townhalls.amount < 3 and self.bot.can_afford(UnitTypeId.COMMANDCENTER):\r\n            await self.bot.expand_now()\r\n\r\n    def manage_production_buildings(self):\r\n        """Builds barracks to produce army units."""\r\n        if self.bot.structures(UnitTypeId.SUPPLYDEPOT).ready.exists and self.bot.structures(UnitTypeId.BARRACKS).amount < 5:\r\n            if self.bot.can_afford(UnitTypeId.BARRACKS):\r\n                worker = self.bot.workers.random_or_none\r\n                if worker:\r\n                    worker.build(UnitTypeId.BARRACKS, near=self.bot.start_location.towards(self.bot.game_info.map_center, 8))\r\n\r\n    def manage_army_production(self):\r\n        """Trains marines from idle barracks."""\r\n        for barracks in self.bot.structures(UnitTypeId.BARRACKS).ready.idle:\r\n            if self.bot.can_afford(UnitTypeId.MARINE):\r\n                barracks.train(UnitTypeId.MARINE)\r\n\r\n\r\n# The main bot class now delegates its macro tasks.\r\nclass MacroBot(BotAI):\r\n    def __init__(self):\r\n        self.macro_manager = MacroManager(self)\r\n\r\n    async def on_step(self, iteration: int):\r\n        # On each step, we simply tell our manager to do its job.\r\n        await self.macro_manager.manage()\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("GresvanAIE"),\r\n        [\r\n            Bot(Race.Terran, MacroBot()),\r\n            Computer(Race.Zerg, Difficulty.Medium)\r\n        ],\r\n        realtime=False,\r\n    )\n'})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,o.jsx)(n,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>i});var t=r(6540);const o={},s=t.createContext(o);function a(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function i(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);