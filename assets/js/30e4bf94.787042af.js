"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[8738],{7063:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>o,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>t,toc:()=>c});const t=JSON.parse('{"id":"Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 2 - Setting Up the RL Environment/2.1 - Installing RL Libraries","title":"2.1 - Installing RL Libraries","description":"Key Changes: This revision elevates the documentation from a simple list of commands to a professional setup guide. It introduces a \\"Project Dependencies\\" table to clearly define the role of each library, providing essential context for a developer. The installation process is framed as a formal \\"Setup Workflow\\" checklist, and a crucial note about PyTorch as the deep learning backend has been added. The verification step is also made more robust by including the library versions, which is a standard practice for ensuring a reproducible environment.","source":"@site/docs/Part 5 - Reinforcement Learning/1 - Foundations of Reinforcement Learning/Chapter 2 - Setting Up the RL Environment/2.1 - Installing RL Libraries.md","sourceDirName":"Part 5 - Reinforcement Learning/1 - Foundations of Reinforcement Learning/Chapter 2 - Setting Up the RL Environment","slug":"/Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 2 - Setting Up the RL Environment/2.1 - Installing RL Libraries","permalink":"/learn-python-sc2/docs/Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 2 - Setting Up the RL Environment/2.1 - Installing RL Libraries","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"1.3 - Our Solution - The Gym Environment Wrapper","permalink":"/learn-python-sc2/docs/Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 1 - Introduction to RL Concepts/1.3 - Our Solution - The Gym Environment Wrapper"},"next":{"title":"2.2 - Code - The Reusable SC2GymEnv Wrapper","permalink":"/learn-python-sc2/docs/Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 2 - Setting Up the RL Environment/2.2 - Code - The Reusable SC2GymEnv Wrapper"}}');var i=r(4848),s=r(8453);const l={},a=void 0,o={},c=[{value:"<strong>2.1 - Installing RL Libraries</strong>",id:"21---installing-rl-libraries",level:3},{value:"<strong>Project Dependencies</strong>",id:"project-dependencies",level:4},{value:"<strong>Setup Workflow</strong>",id:"setup-workflow",level:4},{value:"<strong>Step 1 - Create and Activate a Virtual Environment</strong>",id:"step-1---create-and-activate-a-virtual-environment",level:4},{value:"<strong>Step 2 - Install Libraries via <code>pip</code></strong>",id:"step-2---install-libraries-via-pip",level:4},{value:"<strong>Step 3 - Verify Installation</strong>",id:"step-3---verify-installation",level:4}];function d(e){const n={code:"code",em:"em",h3:"h3",h4:"h4",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.p,{children:(0,i.jsx)(n.em,{children:'Key Changes: This revision elevates the documentation from a simple list of commands to a professional setup guide. It introduces a "Project Dependencies" table to clearly define the role of each library, providing essential context for a developer. The installation process is framed as a formal "Setup Workflow" checklist, and a crucial note about PyTorch as the deep learning backend has been added. The verification step is also made more robust by including the library versions, which is a standard practice for ensuring a reproducible environment.'})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h3,{id:"21---installing-rl-libraries",children:(0,i.jsx)(n.strong,{children:"2.1 - Installing RL Libraries"})}),"\n",(0,i.jsx)(n.p,{children:"To build and train a learning agent, our project requires several key libraries from the Python scientific computing ecosystem. This section outlines the dependencies and provides a step-by-step workflow for setting up a clean, isolated development environment."}),"\n",(0,i.jsx)(n.h4,{id:"project-dependencies",children:(0,i.jsx)(n.strong,{children:"Project Dependencies"})}),"\n",(0,i.jsx)(n.p,{children:"Our implementation will rely on the following core packages:"}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Library"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Role"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"gymnasium"})})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The modern standard for defining Reinforcement Learning environments. It provides the API contract our ",(0,i.jsx)(n.code,{children:"SC2GymEnv"})," wrapper will adhere to."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"stable-baselines3"})})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:['A high-performance library of pre-implemented RL algorithms (like PPO). This will serve as the "brain" or ',(0,i.jsx)(n.strong,{children:"Agent"}),"."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"torch"})})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The deep learning framework used by ",(0,i.jsx)(n.code,{children:"stable-baselines3"})," to define and train the neural network models."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"tensorboard"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"A visualization toolkit for inspecting the training process, allowing us to graph rewards and other metrics."})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"setup-workflow",children:(0,i.jsx)(n.strong,{children:"Setup Workflow"})}),"\n",(0,i.jsx)(n.p,{children:"The installation is a three-step process designed to ensure a stable and reproducible environment."}),"\n",(0,i.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Step 1:"})," Create and activate a dedicated virtual environment."]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Step 2:"})," Install the required packages via ",(0,i.jsx)(n.code,{children:"pip"}),"."]}),"\n",(0,i.jsxs)(n.li,{className:"task-list-item",children:[(0,i.jsx)(n.input,{type:"checkbox",checked:!0,disabled:!0})," ",(0,i.jsx)(n.strong,{children:"Step 3:"})," Verify the installation and library versions."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"step-1---create-and-activate-a-virtual-environment",children:(0,i.jsx)(n.strong,{children:"Step 1 - Create and Activate a Virtual Environment"})}),"\n",(0,i.jsx)(n.p,{children:"This is a critical best practice to prevent dependency conflicts."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Navigate to your project folder"})," in your terminal."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Create the environment"})," (e.g., named ",(0,i.jsx)(n.code,{children:"venv"}),"):","\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"python -m venv venv\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Activate it"}),":","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Windows (Command Prompt / PowerShell):"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:".\\venv\\Scripts\\activate\n"})}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"macOS / Linux:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:"source venv/bin/activate\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"step-2---install-libraries-via-pip",children:(0,i.jsxs)(n.strong,{children:["Step 2 - Install Libraries via ",(0,i.jsx)(n.code,{children:"pip"})]})}),"\n",(0,i.jsx)(n.p,{children:"With the virtual environment active, a single command will install all necessary packages."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-sh",children:'pip install "stable-baselines3[extra]>=2.0.0"\n'})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Why this command?"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"stable-baselines3"}),": Installs the core library."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"[extra]"}),": This is a crucial addition. It automatically pulls in ",(0,i.jsx)(n.code,{children:"gymnasium"}),", ",(0,i.jsx)(n.code,{children:"torch"}),", and ",(0,i.jsx)(n.code,{children:"tensorboard"}),", satisfying all our dependencies in one step."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:">=2.0.0"}),": Specifies a minimum version to ensure API compatibility."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"step-3---verify-installation",children:(0,i.jsx)(n.strong,{children:"Step 3 - Verify Installation"})}),"\n",(0,i.jsx)(n.p,{children:"Confirm that all packages were installed correctly and check their versions."}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["In your active terminal, start a Python interpreter by typing ",(0,i.jsx)(n.code,{children:"python"}),"."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:["At the Python prompt (",(0,i.jsx)(n.code,{children:">>>"}),"), run the following code:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'try:\r\n    import gymnasium\r\n    import stable_baselines3\r\n    import torch\r\n\r\n    print("--- Verification Successful ---")\r\n    print(f"gymnasium version: {gymnasium.__version__}")\r\n    print(f"stable-baselines3 version: {stable_baselines3.__version__}")\r\n    print(f"torch version: {torch.__version__}")\r\n    print("-----------------------------")\r\n\r\nexcept ImportError as e:\r\n    print(f"An error occurred: {e}")\r\n    print("Please check your installation.")\r\n\r\n```If you see the version numbers without any errors, your environment is correctly configured, and you are ready to implement the `SC2GymEnv` wrapper.\n'})}),"\n"]}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>l,x:()=>a});var t=r(6540);const i={},s=t.createContext(i);function l(e){const n=t.useContext(s);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);