"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[3177],{6542:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>i,default:()=>h,frontMatter:()=>l,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Part 1 - Getting Started/Chapter 2 - Installation & First Bot/2.4 - Your First Hello, World Bot","title":"2.4 - Your First Hello, World Bot","description":"In programming, a \\"Hello, World!\\" application is the simplest possible program that proves a new system is working. Our goal here is the same: we will build a bot that does nothing in-game but prints messages to your console.","source":"@site/docs/Part 1 - Getting Started/Chapter 2 - Installation & First Bot/2.4 - Your First Hello, World Bot.md","sourceDirName":"Part 1 - Getting Started/Chapter 2 - Installation & First Bot","slug":"/Part 1 - Getting Started/Chapter 2 - Installation & First Bot/2.4 - Your First Hello, World Bot","permalink":"/learn-python-sc2/docs/Part 1 - Getting Started/Chapter 2 - Installation & First Bot/2.4 - Your First Hello, World Bot","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"2.3 - Running an Example Bot","permalink":"/learn-python-sc2/docs/Part 1 - Getting Started/Chapter 2 - Installation & First Bot/2.3 - Running an Example Bot"},"next":{"title":"3.1 - The Heart of Your Bot","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.1 - The Heart of Your Bot"}}');var r=n(4848),o=n(8453);const l={},i=void 0,a={},c=[{value:"<strong>Chapter Checklist</strong>",id:"chapter-checklist",level:4},{value:"<strong>The Bot&#39;s Lifecycle</strong>",id:"the-bots-lifecycle",level:4},{value:"<strong>Step 1: The Code</strong>",id:"step-1-the-code",level:4},{value:"<strong>Step 2: Anatomy of the Bot</strong>",id:"step-2-anatomy-of-the-bot",level:4},{value:"<strong>Step 3: Execution and Verification</strong>",id:"step-3-execution-and-verification",level:4}];function d(e){const t={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:'In programming, a "Hello, World!" application is the simplest possible program that proves a new system is working. Our goal here is the same: we will build a bot that does nothing in-game but prints messages to your console.'}),"\n",(0,r.jsx)(t.p,{children:"This exercise will teach you the fundamental structure and lifecycle of every bot you will build from now on."}),"\n",(0,r.jsx)(t.h4,{id:"chapter-checklist",children:(0,r.jsx)(t.strong,{children:"Chapter Checklist"})}),"\n",(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"Task 1:"})," Create the Python file for the ",(0,r.jsx)(t.code,{children:"HelloBot"}),"."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"Task 2:"})," Understand the bot's lifecycle diagram."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"Task 3:"})," Run the bot and observe the output."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"Task 4:"})," Verify that the bot completes its full lifecycle."]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"the-bots-lifecycle",children:(0,r.jsx)(t.strong,{children:"The Bot's Lifecycle"})}),"\n",(0,r.jsxs)(t.p,{children:["Every ",(0,r.jsx)(t.code,{children:"python-sc2"})," bot follows a simple, predictable lifecycle. Understanding this flow is the key to knowing where to place your code."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"(Game Starts)\r\n      |\r\n      v\r\n[ on_start() ]  <-- Runs ONCE at the beginning for setup.\r\n      |\r\n      |--------------------------.\r\n      |                          |\r\n      v                          | (Loop)\r\n[ on_step() ]   <-- Runs REPEATEDLY, many times per second.\r\n      |                          |\r\n      '--------------------------'\r\n      |\r\n      v\r\n[ on_end() ]    <-- Runs ONCE after the game has finished.\r\n      |\r\n      v\r\n(Game Ends)\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"step-1-the-code",children:(0,r.jsx)(t.strong,{children:"Step 1: The Code"})}),"\n",(0,r.jsxs)(t.p,{children:["Create a new file named ",(0,r.jsx)(t.code,{children:"hello_bot.py"})," and paste the following code into it."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# hello_bot.py\r\n\r\nfrom sc2 import main\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.data import Difficulty, Result, Race\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.maps import get\r\n\r\n\r\nclass HelloBot(BotAI):\r\n    """A bot to demonstrate the fundamental lifecycle."""\r\n\r\n    async def on_start(self):\r\n        """Runs once, at the start of the game."""\r\n        print("Lifecycle: on_start() - Game has begun!")\r\n\r\n    async def on_step(self, iteration: int):\r\n        """Runs on every game step (frame)."""\r\n        if iteration % 200 == 0:\r\n            # Print a message every 200 steps to show this is looping.\r\n            print(f"Lifecycle: on_step() - Iteration: {iteration}")\r\n\r\n    async def on_end(self, game_result: Result):\r\n        """Runs once, after the game is over."""\r\n        print("Lifecycle: on_end() - Game has finished!")\r\n        print(f"The game result was: {game_result}")\r\n\r\n\r\nif __name__ == "__main__":\r\n    main.run_game(\r\n        get("AbyssalReefLE"),\r\n        [\r\n            Bot(Race.Terran, HelloBot()),\r\n            Computer(Race.Zerg, Difficulty.Hard),  # Add an AI to ensure the game ends.\r\n        ],\r\n        realtime=False,  # Run as fast as possible.\r\n        save_replay_as="HelloBotReplay.SC2Replay",\r\n    )\r\n\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"step-2-anatomy-of-the-bot",children:(0,r.jsx)(t.strong,{children:"Step 2: Anatomy of the Bot"})}),"\n",(0,r.jsxs)(t.p,{children:['This code has two main parts: the bot\'s "brain" (the ',(0,r.jsx)(t.code,{children:"HelloBot"}),' class) and the "launcher" (',(0,r.jsx)(t.code,{children:"main.run_game"}),"). Let's dissect the brain."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Component"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Code"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Role"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"The Bot Class"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"class HelloBot(BotAI):"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["This is the blueprint for your bot. It inherits all the core capabilities from the library's ",(0,r.jsx)(t.code,{children:"BotAI"})," class."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"The Setup Method"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"async def on_start(self):"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"This is your bot's constructor. It's the perfect place for setup logic that only needs to run once."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"The Main Loop"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"async def on_step(self, ...):"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"This is the heart of the bot. Almost all your decision-making logic (to build, fight, or expand) will live here."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"The Cleanup Method"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"async def on_end(self, ...):"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["This is your bot's destructor. It's ideal for post-game analysis or saving learned data. The ",(0,r.jsx)(t.code,{children:"game_result"})," tells you if you won or lost."]})]})]})]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"step-3-execution-and-verification",children:(0,r.jsx)(t.strong,{children:"Step 3: Execution and Verification"})}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Activate your virtual environment."})," ",(0,r.jsx)(t.code,{children:"(venv)"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Run the script from your terminal."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-sh",children:"python hello_bot.py\n"})}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Expected Outcome:"})}),"\n",(0,r.jsxs)(t.p,{children:["Because we set ",(0,r.jsx)(t.code,{children:"realtime=False"})," and added an opponent, the game will run very quickly and you won't see much on screen. The important part is the output in your ",(0,r.jsx)(t.strong,{children:"terminal"}),". You will see messages appear in a specific order, proving the lifecycle works as expected."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"Lifecycle: on_start() - Game has begun!\r\nLifecycle: on_step() - Iteration: 0\r\nLifecycle: on_step() - Iteration: 200\r\nLifecycle: on_step() - Iteration: 400\r\n...\r\nLifecycle: on_end() - Game has finished!\r\nThe game result was: Result.Victory\n"})}),"\n",(0,r.jsx)(t.p,{children:"Congratulations. You have successfully created a bot and verified its core execution lifecycle. You are now ready to add actions inside this structure."})]})}function h(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>l,x:()=>i});var s=n(6540);const r={},o=s.createContext(r);function l(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:l(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);