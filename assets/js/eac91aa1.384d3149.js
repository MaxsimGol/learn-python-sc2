"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[4317],{4250:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>l,contentTitle:()=>d,default:()=>u,frontMatter:()=>a,metadata:()=>t,toc:()=>o});const t=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.4 - Production- Training Units and Researching Upgrades","title":"5.4 - Production- Training Units and Researching Upgrades","description":"Once your base is established, your bot\'s primary goal is to spend its resources effectively by producing units and enhancing them with upgrades. The commands for training and researching are very similar: you select an eligible building and issue a specific production command.","source":"@site/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.4 - Production- Training Units and Researching Upgrades.md","sourceDirName":"Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions","slug":"/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.4 - Production- Training Units and Researching Upgrades","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.4 - Production- Training Units and Researching Upgrades","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"5.3 - Worker Commands- Gather and Build","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.3 - Worker Commands- Gather and Build"},"next":{"title":"5.5 - Using Special Abilities","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.5 - Using Special Abilities"}}');var s=r(4848),i=r(8453);const a={},d=void 0,l={},o=[{value:"<strong>The Production Request Lifecycle</strong>",id:"the-production-request-lifecycle",level:4},{value:"<strong>A Comparison of Production Commands</strong>",id:"a-comparison-of-production-commands",level:4},{value:"<strong>A Developer&#39;s Checklist for Production</strong>",id:"a-developers-checklist-for-production",level:4},{value:"<strong>Code Example: The Quartermaster Bot</strong>",id:"code-example-the-quartermaster-bot",level:4}];function c(e){const n={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"Once your base is established, your bot's primary goal is to spend its resources effectively by producing units and enhancing them with upgrades. The commands for training and researching are very similar: you select an eligible building and issue a specific production command."}),"\n",(0,s.jsx)(n.h4,{id:"the-production-request-lifecycle",children:(0,s.jsx)(n.strong,{children:"The Production Request Lifecycle"})}),"\n",(0,s.jsx)(n.p,{children:"Both training and researching follow the same logical flow. Before issuing a command, you must verify that the request is valid."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"(You want to produce something...)\r\n           |\r\n           v\r\n.---  IS IT POSSIBLE? ------.\r\n| - self.can_afford(ITEM_ID)|  <-- Do I have the resources?\r\n| - self.supply_left > 0    |  <-- (For units only) Do I have supply?\r\n`---------------------------`\r\n           | (Yes)\r\n           v\r\n.--- IS IT REDUNDANT? -----------------.\r\n| - self.already_pending(ITEM_ID) == 0 | <-- Am I already making this??|\r\n`--------------------------------------`\r\n           | (No)\r\n           v\r\n.--- WHERE CAN I MAKE IT? ----------------------------.\r\n| - building = self.structures(TYPE).ready.idle.first |\r\n`-----------------------------------------------------`\r\n           | (Building exists)\r\n           v\r\n.---- ISSUE COMMAND -----------.\r\n| - building.train(UNIT)       |\r\n| - building.research(UPGRADE) |\r\n`------------------------------`\n"})}),"\n",(0,s.jsx)(n.p,{children:"Adhering to this lifecycle prevents your bot from getting stuck trying to afford something it can't, or wasting time queuing redundant upgrades."}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"a-comparison-of-production-commands",children:(0,s.jsx)(n.strong,{children:"A Comparison of Production Commands"})}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Aspect"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Training a Unit"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Researching an Upgrade"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Command"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"structure.train(unit_id)"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"structure.research(upgrade_id)"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Target Building"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A production structure (Barracks, Gateway)."}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"A tech structure (Forge, Engineering Bay)."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"ID Type"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"UnitTypeId"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"UpgradeId"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Pre-checks"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"can_afford"}),", ",(0,s.jsx)(n.code,{children:"supply_left"})]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"can_afford"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Redundancy Check"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"self.already_pending(unit_id)"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"self.already_pending_upgrade(upgrade_id)"})})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Finding a Building"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"self.structures(BARRACKS).ready.idle"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"self.structures(FORGE).ready.idle"})})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"a-developers-checklist-for-production",children:(0,s.jsx)(n.strong,{children:"A Developer's Checklist for Production"})}),"\n",(0,s.jsx)(n.p,{children:"Before you write any production logic, answer these questions:"}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"1. What do I want to build?"})," (e.g., a Marine)"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"2. Can I afford it?"})," (",(0,s.jsx)(n.code,{children:"self.can_afford(UnitTypeId.MARINE)"}),")"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"3. (For units) Do I have the supply?"})," (",(0,s.jsx)(n.code,{children:"self.supply_left >= 1"}),")"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"4. Am I already making it?"})," (",(0,s.jsx)(n.code,{children:"self.already_pending(UnitTypeId.MARINE) == 0"}),")"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"5. Do I have a building that can make it, and is it ready and idle?"})," (",(0,s.jsx)(n.code,{children:"self.structures(UnitTypeId.BARRACKS).ready.idle"}),")"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"6. If all checks pass, issue the command."})]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"code-example-the-quartermaster-bot",children:(0,s.jsx)(n.strong,{children:"Code Example: The Quartermaster Bot"})}),"\n",(0,s.jsx)(n.p,{children:"This bot acts as a quartermaster, managing both unit production and research requests. It uses clean, separate functions for each task and demonstrates the robust, query-based approach to finding eligible buildings."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# quartermaster_bot.py\r\n\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.data import Difficulty, Race\r\nfrom sc2.main import run_game\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.ids.upgrade_id import UpgradeId\r\n\r\nclass QuartermasterBot(BotAI):\r\n    """A bot that manages production and research requests."""\r\n\r\n    async def on_step(self, iteration: int):\r\n        # We must have a command center to do anything.\r\n        if not self.townhalls:\r\n            return\r\n\r\n        # Core logic loop:\r\n        await self.manage_unit_production()\r\n        await self.manage_research()\r\n        # Helper to build our structures for the demo.\r\n        await self.build_tech_structures()\r\n\r\n    async def manage_unit_production(self):\r\n        """Trains marines from any available idle barracks."""\r\n        # Find all idle, ready barracks.\r\n        idle_barracks = self.structures(UnitTypeId.BARRACKS).ready.idle\r\n        if not idle_barracks:\r\n            return\r\n\r\n        # Check conditions before issuing the command.\r\n        can_afford_marine = self.can_afford(UnitTypeId.MARINE)\r\n        has_enough_supply = self.supply_left >= 1\r\n        is_not_pending = self.already_pending(UnitTypeId.MARINE) == 0\r\n\r\n        if can_afford_marine and has_enough_supply and is_not_pending:\r\n            # Train from the first available barracks to prevent over-queuing.\r\n            await self.do(idle_barracks.first.train(UnitTypeId.MARINE))\r\n\r\n    async def manage_research(self):\r\n        """Researches infantry weapons if possible."""\r\n        # Find all idle, ready engineering bays.\r\n        idle_eng_bays = self.structures(UnitTypeId.ENGINEERINGBAY).ready.idle\r\n        if not idle_eng_bays:\r\n            return\r\n\r\n        # Define the upgrade chain\r\n        upgrades = [\r\n            UpgradeId.TERRANINFANTRYWEAPONSLEVEL1,\r\n            UpgradeId.TERRANINFANTRYWEAPONSLEVEL2,\r\n            UpgradeId.TERRANINFANTRYWEAPONSLEVEL3\r\n        ]\r\n\r\n        for upgrade in upgrades:\r\n            # Check conditions for the current upgrade level.\r\n            can_afford_upgrade = self.can_afford(upgrade)\r\n            is_not_pending = self.already_pending_upgrade(upgrade) == 0\r\n            # Ensure we don\'t research an already completed level.\r\n            is_not_finished = upgrade not in self.state.upgrades\r\n\r\n            if can_afford_upgrade and is_not_pending and is_not_finished:\r\n                # Research from the first available bay and stop checking.\r\n                await self.do(idle_eng_bays.first.research(upgrade))\r\n                break\r\n\r\n    async def build_tech_structures(self):\r\n        """A simple helper to build the necessary structures for the demo."""\r\n        if self.supply_left < 3 and self.already_pending(UnitTypeId.SUPPLYDEPOT) == 0:\r\n            if self.can_afford(UnitTypeId.SUPPLYDEPOT):\r\n                await self.build(UnitTypeId.SUPPLYDEPOT, near=self.start_location.towards(self.game_info.map_center, 5))\r\n\r\n        if self.structures(UnitTypeId.SUPPLYDEPOT).ready:\r\n            if not self.structures(UnitTypeId.BARRACKS) and not self.already_pending(UnitTypeId.BARRACKS):\r\n                if self.can_afford(UnitTypeId.BARRACKS):\r\n                    await self.build(UnitTypeId.BARRACKS, near=self.start_location.towards(self.game_info.map_center, 8))\r\n\r\n            if self.structures(UnitTypeId.BARRACKS).ready:\r\n                 if not self.structures(UnitTypeId.ENGINEERINGBAY) and not self.already_pending(UnitTypeId.ENGINEERINGBAY):\r\n                    if self.can_afford(UnitTypeId.ENGINEERINGBAY):\r\n                        await self.build(UnitTypeId.ENGINEERINGBAY, near=self.start_location.towards(self.game_info.map_center, 10))\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("BlackburnAIE"),\r\n        [\r\n            Bot(Race.Terran, QuartermasterBot()),\r\n            Computer(Race.Zerg, Difficulty.VeryEasy)\r\n        ],\r\n        realtime=True,\r\n    )\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>a,x:()=>d});var t=r(6540);const s={},i=t.createContext(s);function a(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);