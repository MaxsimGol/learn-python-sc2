"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[6415],{3543:(n,e,r)=>{r.r(e),r.d(e,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>a,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"Part 5 - Reinforcement Learning/Advanced RL and Next Steps/Chapter 7 - Visualizing and Evaluating Training/7.1 - Setting up TensorBoard","title":"7.1 - Setting up TensorBoard","description":"Training a reinforcement learning agent is an empirical process. To understand if the agent is learning, improving, or stagnating, you must visualize its performance metrics over time. TensorBoard is the industry-standard tool for this purpose.","source":"@site/docs/Part 5 - Reinforcement Learning/2 - Advanced RL and Next Steps/01-Chapter 7 - Visualizing and Evaluating Training/7.1 - Setting up TensorBoard.md","sourceDirName":"Part 5 - Reinforcement Learning/2 - Advanced RL and Next Steps/01-Chapter 7 - Visualizing and Evaluating Training","slug":"/Part 5 - Reinforcement Learning/Advanced RL and Next Steps/Chapter 7 - Visualizing and Evaluating Training/7.1 - Setting up TensorBoard","permalink":"/learn-python-sc2/docs/Part 5 - Reinforcement Learning/Advanced RL and Next Steps/Chapter 7 - Visualizing and Evaluating Training/7.1 - Setting up TensorBoard","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"6.3 - Loading and Running a Trained Agent","permalink":"/learn-python-sc2/docs/Part 5 - Reinforcement Learning/Foundations of Reinforcement Learning/Chapter 6 - Training Your Agents/6.3 - Loading and Running a Trained Agent"},"next":{"title":"7.2 - What to Look For in Training Graphs","permalink":"/learn-python-sc2/docs/Part 5 - Reinforcement Learning/Advanced RL and Next Steps/Chapter 7 - Visualizing and Evaluating Training/7.2 - What to Look For in Training Graphs"}}');var i=r(4848),s=r(8453);const a={},o=void 0,d={},l=[{value:"<strong>The Role of TensorBoard</strong>",id:"the-role-of-tensorboard",level:4},{value:"<strong>Instrumentation and Visualization Workflow</strong>",id:"instrumentation-and-visualization-workflow",level:4},{value:"<strong>Setup and Execution</strong>",id:"setup-and-execution",level:4},{value:"<strong>Expected Outcome</strong>",id:"expected-outcome",level:4}];function c(n){const e={code:"code",em:"em",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...n.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(e.p,{children:["Training a reinforcement learning agent is an empirical process. To understand if the agent is learning, improving, or stagnating, you must visualize its performance metrics over time. ",(0,i.jsx)(e.strong,{children:"TensorBoard"})," is the industry-standard tool for this purpose."]}),"\n",(0,i.jsxs)(e.p,{children:["This section provides the standard operating procedure for instrumenting your ",(0,i.jsx)(e.code,{children:"stable-baselines3"})," training runs to generate and view TensorBoard logs."]}),"\n",(0,i.jsx)(e.h4,{id:"the-role-of-tensorboard",children:(0,i.jsx)(e.strong,{children:"The Role of TensorBoard"})}),"\n",(0,i.jsx)(e.p,{children:"TensorBoard runs as a local web server that parses log files generated during training and displays them as interactive graphs in your web browser. This allows you to monitor key metrics in real-time and analyze the agent's learning trajectory."}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h4,{id:"instrumentation-and-visualization-workflow",children:(0,i.jsx)(e.strong,{children:"Instrumentation and Visualization Workflow"})}),"\n",(0,i.jsx)(e.p,{children:"The process involves two parallel tasks: running the training script to generate logs and running the TensorBoard server to consume them."}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{children:"       +------------------------------------+\r\n       |          Terminal 1                |\r\n       |  (Training Process)                |\r\n       +------------------------------------+\r\n                      |\r\n                      | 1. python train.py\r\n                      |\r\n                      v\r\n       +------------------------------------+\r\n       |      stable-baselines3 PPO         |------\x3e Generates Logs\r\n       +------------------------------------+\r\n\r\n       +------------------------------------+      +-----------------------+\r\n       |          Terminal 2                |      |     Web Browser       |\r\n       |  (Visualization Process)           |      +-----------------------+\r\n       +------------------------------------+                ^\r\n                      |                                      |\r\n                      | 2. tensorboard --logdir ...          | 3. View at\r\n                      |                                      | localhost:6006\r\n                      v                                      |\r\n       +------------------------------------+                |\r\n       |      TensorBoard Web Server        |<------ Reads Logs\r\n       +------------------------------------+\n"})}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h4,{id:"setup-and-execution",children:(0,i.jsx)(e.strong,{children:"Setup and Execution"})}),"\n",(0,i.jsxs)(e.ul,{children:["\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Step 1: Instrument the Training Script"}),"\r\nThis step is already complete in our ",(0,i.jsx)(e.code,{children:"train.py"})," script. The ",(0,i.jsx)(e.code,{children:"tensorboard_log"})," parameter directs ",(0,i.jsx)(e.code,{children:"stable-baselines3"})," to write logs to the specified directory."]}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsxs)(e.em,{children:["In ",(0,i.jsx)(e.code,{children:"train.py"}),":"]})}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-python",children:'model = PPO(\r\n    # ... other params\r\n    tensorboard_log="./sc2_rl_tensorboard/"\r\n)\n'})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsxs)(e.p,{children:[(0,i.jsx)(e.strong,{children:"Step 2: Run the Training Process"}),"\r\nIn your first terminal, with your virtual environment active, start the training as usual."]}),"\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sh",children:"python train.py\n"})}),"\n",(0,i.jsxs)(e.p,{children:["This will create a ",(0,i.jsx)(e.code,{children:"sc2_rl_tensorboard/"})," directory in your project folder and begin populating it with log files."]}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:["\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.strong,{children:"Step 3: Launch the TensorBoard Server"})}),"\n",(0,i.jsxs)(e.ol,{children:["\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Open a second, separate terminal window."})}),"\n",(0,i.jsx)(e.li,{children:(0,i.jsx)(e.strong,{children:"Navigate to the same project directory."})}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Activate the same virtual environment."})," This is a critical step, as it ensures the ",(0,i.jsx)(e.code,{children:"tensorboard"})," command is available.","\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sh",children:"# Windows\r\n.\\venv\\Scripts\\activate\r\n# macOS / Linux\r\nsource venv/bin/activate\n"})}),"\n"]}),"\n",(0,i.jsxs)(e.li,{children:[(0,i.jsx)(e.strong,{children:"Launch the server,"})," pointing it at the log directory.","\n",(0,i.jsx)(e.pre,{children:(0,i.jsx)(e.code,{className:"language-sh",children:"tensorboard --logdir ./sc2_rl_tensorboard/\n"})}),"\n"]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(e.hr,{}),"\n",(0,i.jsx)(e.h4,{id:"expected-outcome",children:(0,i.jsx)(e.strong,{children:"Expected Outcome"})}),"\n",(0,i.jsx)(e.p,{children:"After running the launch command, your second terminal will display a message similar to this:"}),"\n",(0,i.jsx)(e.p,{children:(0,i.jsx)(e.code,{children:"TensorBoard 2.15.2 at http://localhost:6006/ (Press CTRL+C to quit)"})}),"\n",(0,i.jsxs)(e.p,{children:["Navigating to ",(0,i.jsx)(e.strong,{children:(0,i.jsx)(e.code,{children:"http://localhost:6006/"})})," in your web browser will open the TensorBoard dashboard. As your agent trains in the first terminal, you can refresh this dashboard to see the graphs update with new data, providing a live view of the learning process. In the next section, we will cover which of these graphs are most important to watch."]})]})}function h(n={}){const{wrapper:e}={...(0,s.R)(),...n.components};return e?(0,i.jsx)(e,{...n,children:(0,i.jsx)(c,{...n})}):c(n)}},8453:(n,e,r)=>{r.d(e,{R:()=>a,x:()=>o});var t=r(6540);const i={},s=t.createContext(i);function a(n){const e=t.useContext(s);return t.useMemo((function(){return"function"==typeof n?n(e):{...e,...n}}),[e,n])}function o(n){let e;return e=n.disableParentContext?"function"==typeof n.components?n.components(i):n.components||i:a(n.components),t.createElement(s.Provider,{value:e},n.children)}}}]);