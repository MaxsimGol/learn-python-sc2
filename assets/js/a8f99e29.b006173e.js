"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[8378],{7309:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>x,frontMatter:()=>c,metadata:()=>s,toc:()=>p});const s=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.1 - Static Info - Map Name, Size, and Start Locations","title":"4.1 - Static Info - Map Name, Size, and Start Locations","description":"Before a single unit moves, your bot needs a complete understanding of the environment. The self.game_info object is your access to this static blueprint. Think of it as the unchangeable physical game board: the map\'s size, terrain, and starting positions are all fixed at the beginning of the match and will not change.","source":"@site/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.1 - Static Info - Map Name, Size, and Start Locations.mdx","sourceDirName":"Part 2 - Core Concepts/Chapter 4 - Reading the Game State","slug":"/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.1 - Static Info - Map Name, Size, and Start Locations","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.1 - Static Info - Map Name, Size, and Start Locations","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"3.3 - The Power of Async and Await","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.3 - The Power of Async and Await"},"next":{"title":"4.2 - Dynamic Info- Minerals, Supply, and Time","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.2 - Dynamic Info- Minerals, Supply, and Time"}}');var i=n(4848),r=n(8453),a=n(6540),o=n(5293);function l({src:e,style:t,...n}){const s=(0,a.useRef)(null),{colorMode:r}=(0,o.G)(),[l,c]=(0,a.useState)(t.height||"500px");return(0,a.useEffect)((()=>{const e=e=>{const t=s.current;t&&(e.data&&"number"==typeof e.data.height&&c(`${e.data.height}px`),e.data&&e.data.getDocusaurusTheme&&t.contentWindow.postMessage({theme:r},"*"))};return window.addEventListener("message",e),()=>{window.removeEventListener("message",e)}}),[r]),(0,a.useEffect)((()=>{const e=s.current;e&&e.contentWindow.postMessage({theme:r},"*")}),[r]),(0,i.jsx)("iframe",{ref:s,src:e,style:{display:"block",width:"100%",border:"none",...t,height:l},scrolling:"no",...n})}const c={},d=void 0,h={},p=[{value:"<strong>The Most Important Data: Start Locations</strong>",id:"the-most-important-data-start-locations",level:4},{value:"<strong>The <code>self.game_info</code> Attribute Table</strong>",id:"the-selfgame_info-attribute-table",level:4},{value:"<strong>Practical Application Checklist</strong>",id:"practical-application-checklist",level:4},{value:"<strong>Code Example: The Strategist Bot</strong>",id:"code-example-the-strategist-bot",level:4}];function f(e){const t={code:"code",em:"em",h1:"h1",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Before a single unit moves, your bot needs a complete understanding of the environment. The ",(0,i.jsx)(t.code,{children:"self.game_info"})," object is your access to this ",(0,i.jsx)(t.strong,{children:"static blueprint"}),". Think of it as the unchangeable physical game board: the map's size, terrain, and starting positions are all fixed at the beginning of the match and will not change."]}),"\n",(0,i.jsxs)(t.p,{children:["This information is your foundation for all high-level strategy. It's available from ",(0,i.jsx)(t.code,{children:"on_start()"})," onwards and is essential for planning expansions, identifying chokepoints, and, most importantly, finding your enemy."]}),"\n",(0,i.jsx)(t.h4,{id:"the-most-important-data-start-locations",children:(0,i.jsx)(t.strong,{children:"The Most Important Data: Start Locations"})}),"\n",(0,i.jsx)(t.p,{children:"Locating the enemy is your first priority. The library provides several properties to help, and it's critical to understand the difference."}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{children:"      THE MAP (e.g., Acropolis LE)\r\n+------------------------------------+\r\n| P1 o                               |  P1: Your bot's actual start\r\n|(self.start_location)               |\r\n|                                    |\r\n|                                    |  \r\n|                                    |\r\n|                                    |\r\n|                               o P3 |  2: The enemy's actual start\r\n|     (self.enemy_start_locations[0])|\r\n+------------------------------------+\n"})}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Property"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"What It Is"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Common Use"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"self.start_location"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Your ",(0,i.jsx)(t.em,{children:"exact"})," starting ",(0,i.jsx)(t.code,{children:"Point2"}),"."]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"Finding the center of your own base."})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"self.enemy_start_locations"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["A ",(0,i.jsx)(t.code,{children:"list"})," of your opponents' ",(0,i.jsx)(t.em,{children:"exact"})," starting locations."]}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"The primary way you find the enemy in a 1v1."})})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h4,{id:"the-selfgame_info-attribute-table",children:(0,i.jsxs)(t.strong,{children:["The ",(0,i.jsx)(t.code,{children:"self.game_info"})," Attribute Table"]})}),"\n",(0,i.jsx)(t.p,{children:"This table details the core components of the battlefield blueprint and their strategic value."}),"\n",(0,i.jsxs)(t.table,{children:[(0,i.jsx)(t.thead,{children:(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Attribute"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Data Type"}),(0,i.jsx)(t.th,{style:{textAlign:"left"},children:"Description & Practical Use Case"})]})}),(0,i.jsxs)(t.tbody,{children:[(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"map_name"})})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"str"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:['The name of the map file (e.g., "AbyssalReefLE").',(0,i.jsx)("br",{}),(0,i.jsx)(t.strong,{children:"Use:"})," Log which maps your bot wins or loses on."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"map_size"})})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"Size"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["Dimensions (",(0,i.jsx)(t.code,{children:".width"}),", ",(0,i.jsx)(t.code,{children:".height"}),") of the map.",(0,i.jsx)("br",{}),(0,i.jsx)(t.strong,{children:"Use:"})," Judge travel times and estimate the size of your army."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"playable_area"})})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"Rect"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["A rectangle defining the map's playable boundaries.",(0,i.jsx)("br",{}),(0,i.jsx)(t.strong,{children:"Use:"})," Keep your units from getting stuck on unplayable edges."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"pathing_grid"})})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"PixelMap"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["A 2D array showing walkable terrain for ground units.",(0,i.jsx)("br",{}),(0,i.jsx)(t.strong,{children:"Use (Advanced):"})," Find chokepoints or wall-off locations by analyzing pathable tiles."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:(0,i.jsx)(t.code,{children:"placement_grid"})})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.code,{children:"PixelMap"})}),(0,i.jsxs)(t.td,{style:{textAlign:"left"},children:["A 2D array showing where buildings can be constructed.",(0,i.jsx)("br",{}),(0,i.jsx)(t.strong,{children:"Use (Advanced):"})," Find optimal, non-blocking spots for buildings."]})]}),(0,i.jsxs)(t.tr,{children:[(0,i.jsx)(t.td,{style:{textAlign:"left"},children:(0,i.jsx)(t.strong,{children:"For RL Developers"})}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"N/A"}),(0,i.jsx)(t.td,{style:{textAlign:"left"},children:"This static data is perfect for an RL agent's observation space, as it only needs to be processed once, reducing the complexity of per-frame observations."})]})]})]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h4,{id:"practical-application-checklist",children:(0,i.jsx)(t.strong,{children:"Practical Application Checklist"})}),"\n",(0,i.jsxs)(t.p,{children:["Here is how you should think about using ",(0,i.jsx)(t.code,{children:"self.game_info"})," in your own projects:"]}),"\n",(0,i.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"1. Find the Enemy:"})," Immediately grab ",(0,i.jsx)(t.code,{children:"self.enemy_start_locations[0]"})," to get your primary target."]}),"\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"2. Plan Expansions:"})," Find the closest base location in ",(0,i.jsx)(t.code,{children:"self.expansion_locations_list"})," (a helper property) to your ",(0,i.jsx)(t.code,{children:"self.start_location"})," or use ",(0,i.jsx)(t.code,{children:"self.get_next_expansion()"})," that finds the closest, unoccupied expansion location to your existing bases."]}),"\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"3. Determine Build Patterns:"})," Use your start location to decide on safe places to build, like placing a Supply Depot behind your mineral line."]}),"\n",(0,i.jsxs)(t.li,{className:"task-list-item",children:[(0,i.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,i.jsx)(t.strong,{children:"4. Set Rally Points:"})," Calculate a safe rally point between your base and the enemy's for newly trained units."]}),"\n"]}),"\n",(0,i.jsx)(t.hr,{}),"\n",(0,i.jsx)(t.h4,{id:"code-example-the-strategist-bot",children:(0,i.jsx)(t.strong,{children:"Code Example: The Strategist Bot"})}),"\n",(0,i.jsxs)(t.p,{children:["This bot uses ",(0,i.jsx)(t.code,{children:"self.game_info"})," in ",(0,i.jsx)(t.code,{children:"on_start"})," to make several strategic decisions at the very beginning of the game."]}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-python",children:'# strategist_bot.py\r\n\r\nfrom sc2.main import run_game\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.data import Difficulty, Race\r\n\r\n\r\nclass StrategistBot(BotAI):\r\n    """A bot that uses static info to make initial strategic decisions."""\r\n\r\n    async def on_start(self):\r\n        """Analyze the blueprint and set up a basic plan."""\r\n        print("--- Battlefield Blueprint Analysis ---")\r\n\r\n        # 1. Find the enemy\'s main base. This is our primary target.\r\n        self.enemy_main_base = self.enemy_start_locations[0]\r\n        print(f"Enemy main located at: {self.enemy_main_base.rounded}")\r\n\r\n        # 2. Find a safe position behind our mineral line to build depots.\r\n        # This uses vector math to move from our townhall away from the main ramp.\r\n        self.safe_build_position = self.start_location.towards(\r\n            self.main_base_ramp.top_center, -8\r\n        )\r\n        print(f"Designated safe building position: {self.safe_build_position.rounded}")\r\n\r\n        # 3. Designate a scout. We\'ll tag one worker for this role.\r\n        # Note: We store the tag, not the unit object, as the object can become stale.\r\n        self.scout_tag = self.workers.random.tag\r\n        print(f"Worker {self.scout_tag} has been assigned scouting duty.")\r\n        print("--- Analysis Complete ---")\r\n\r\n    async def on_step(self, iteration: int):\r\n        """Execute the plan set in on_start."""\r\n        # Action 1: Send the designated scout to the enemy base on the first step.\r\n        if iteration == 0:\r\n            scout_unit = self.workers.by_tag(self.scout_tag)\r\n            if scout_unit:\r\n                scout_unit.attack(self.enemy_main_base)\r\n                print(f"ACTION: Scout {self.scout_tag} dispatched to enemy base.")\r\n\r\n        # Action 2: Build a Supply Depot when we are close to our supply cap.\r\n        # We also check if we can afford it and are not already building one.\r\n        if (\r\n            self.supply_left < 5\r\n            and self.can_afford(UnitTypeId.SUPPLYDEPOT)\r\n            and self.already_pending(UnitTypeId.SUPPLYDEPOT) == 0\r\n        ):\r\n            # self.build is async, so it must be awaited.\r\n            await self.build(UnitTypeId.SUPPLYDEPOT, near=self.safe_build_position)\r\n            print(\r\n                f"ACTION: Building Supply Depot at safe location {self.safe_build_position.rounded}."\r\n            )\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("AbyssalReefLE"),\r\n        [Bot(Race.Terran, StrategistBot()), Computer(Race.Zerg, Difficulty.Easy)],\r\n        realtime=True,\r\n    )\n'})}),"\n",(0,i.jsx)(t.hr,{}),"\n","\n",(0,i.jsx)(t.h1,{id:"interactive-map-demonstration",children:(0,i.jsx)("p",{align:"center",children:"Interactive Map Demonstration"})}),"\n",(0,i.jsx)(l,{src:"/learn-python-sc2/interactive_pages/Part_2_4.1.html",style:{width:"100%",height:"500px",border:"0"},title:"Theme Aware Interactive Demo"})]})}function x(e={}){const{wrapper:t}={...(0,r.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(f,{...e})}):f(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>a,x:()=>o});var s=n(6540);const i={},r=s.createContext(i);function a(e){const t=s.useContext(r);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:a(e.components),s.createElement(r.Provider,{value:t},e.children)}}}]);