"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[3023],{7388:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>h,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.1 - The Core of Control","title":"5.1 - The Core of Control","description":"To issue actions effectively in python-sc2, it is essential to understand that there are two distinct architectural pathways for interacting with the StarCraft II engine, each optimized for a different purpose: Commands and Queries.","source":"@site/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.1 - The Core of Control.md","sourceDirName":"Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions","slug":"/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.1 - The Core of Control","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.1 - The Core of Control","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"4.4 - Managing Groups- The Units Collection","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.4 - Managing Groups- The Units Collection"},"next":{"title":"5.2 - Basic Commands","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.2 - Basic Commands"}}');var i=t(4848),o=t(8453);const r={},a=void 0,c={},l=[{value:"<strong>Pathway 1- The Command Buffer (High Throughput)</strong>",id:"pathway-1--the-command-buffer-high-throughput",level:4},{value:"<strong>Pathway 2- The Awaited Query (Low Latency)</strong>",id:"pathway-2--the-awaited-query-low-latency",level:4},{value:"<strong>A Comparison of Interaction Types</strong>",id:"a-comparison-of-interaction-types",level:4},{value:"<strong>Visualizing the <code>on_step</code> Execution Flow</strong>",id:"visualizing-the-on_step-execution-flow",level:4},{value:"<strong>Architectural Justification</strong>",id:"architectural-justification",level:4}];function d(e){const n={code:"code",em:"em",h4:"h4",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["To issue actions effectively in ",(0,i.jsx)(n.code,{children:"python-sc2"}),", it is essential to understand that there are two distinct architectural pathways for interacting with the StarCraft II engine, each optimized for a different purpose: ",(0,i.jsx)(n.strong,{children:"Commands"})," and ",(0,i.jsx)(n.strong,{children:"Queries"}),"."]}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Commands"}),' are non-blocking, "fire-and-forget" instructions that are buffered for performance.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Queries"})," are blocking requests that pause execution to wait for an immediate response from the game engine."]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Mastering the distinction between these two pathways is the key to writing efficient, error-free bot code."}),"\n",(0,i.jsx)(n.h4,{id:"pathway-1--the-command-buffer-high-throughput",children:(0,i.jsx)(n.strong,{children:"Pathway 1- The Command Buffer (High Throughput)"})}),"\n",(0,i.jsxs)(n.p,{children:["This is the default pathway for most actions. It is used when your code ",(0,i.jsx)(n.strong,{children:"tells"})," a unit to do something and does not require an immediate response to continue its logic."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Examples:"})," ",(0,i.jsx)(n.code,{children:"unit.attack()"}),", ",(0,i.jsx)(n.code,{children:"unit.move()"}),", ",(0,i.jsx)(n.code,{children:"structure.train()"}),", ",(0,i.jsx)(n.code,{children:"worker.gather()"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mechanism:"})," When you call a command method like ",(0,i.jsx)(n.code,{children:"marine.attack(target)"}),", the instruction is simply added to an internal action buffer. Your code's execution continues instantly. At the end of the ",(0,i.jsx)(n.code,{children:"on_step"})," function, the library sends the entire buffer of collected commands to the game in a single, highly-optimized batch."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Rule:"})," Because you are not waiting for a result, you ",(0,i.jsx)(n.strong,{children:"do not"})," use ",(0,i.jsx)(n.code,{children:"await"})," for simple commands."]}),"\n"]}),"\n",(0,i.jsx)(n.h4,{id:"pathway-2--the-awaited-query-low-latency",children:(0,i.jsx)(n.strong,{children:"Pathway 2- The Awaited Query (Low Latency)"})}),"\n",(0,i.jsxs)(n.p,{children:["This pathway is used only when your code ",(0,i.jsx)(n.strong,{children:"asks"})," the game for a piece of information that it needs ",(0,i.jsx)(n.em,{children:"right now"})," to make a subsequent decision."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Examples:"})," ",(0,i.jsx)(n.code,{children:"self.find_placement(...)"}),", ",(0,i.jsx)(n.code,{children:"self.expand_now()"}),", ",(0,i.jsx)(n.code,{children:"self.get_available_abilities(...)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Mechanism:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["Your code reaches a line like ",(0,i.jsx)(n.code,{children:"pylon_location = await self.find_placement(...)"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:["The ",(0,i.jsx)(n.code,{children:"await"})," keyword ",(0,i.jsxs)(n.strong,{children:["pauses your ",(0,i.jsx)(n.code,{children:"on_step"})," function"]})," at that line."]}),"\n",(0,i.jsxs)(n.li,{children:["A query is sent to the game engine, and control is yielded to the main ",(0,i.jsx)(n.code,{children:"asyncio"})," event loop."]}),"\n",(0,i.jsxs)(n.li,{children:["When the engine's response arrives, the event loop ",(0,i.jsxs)(n.strong,{children:["resumes your ",(0,i.jsx)(n.code,{children:"on_step"})," function"]})," at the exact point it paused, now with the query's result available."]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"The Rule:"})," Because you are explicitly waiting for a response, you ",(0,i.jsx)(n.strong,{children:"must"})," use ",(0,i.jsx)(n.code,{children:"await"})," for queries."]}),"\n"]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"a-comparison-of-interaction-types",children:(0,i.jsx)(n.strong,{children:"A Comparison of Interaction Types"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Interaction Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Analogy"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Primary Use Case"}),(0,i.jsxs)(n.th,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"await"})," Required?"]})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Command"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:'Adding an item to a shopping cart. You add many items, then "check out" once at the end.'}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.strong,{children:"Telling"})," units to perform actions (",(0,i.jsx)(n.code,{children:"attack"}),", ",(0,i.jsx)(n.code,{children:"move"}),")."]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"No"})})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Query"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"Making a synchronous API request. Your code blocks until the server's JSON response is received."}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.strong,{children:"Asking"})," the game for information (",(0,i.jsx)(n.code,{children:"find_placement"}),")."]}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:"Yes"})})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"visualizing-the-on_step-execution-flow",children:(0,i.jsxs)(n.strong,{children:["Visualizing the ",(0,i.jsx)(n.code,{children:"on_step"})," Execution Flow"]})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"async def on_step(self, iteration: int):\r\n    # --- Start of on_step execution ---\r\n\r\n    # PATHWAY 1: COMMAND (Non-blocking)\r\n    # Adds an 'attack' command to the internal buffer. Execution is instantaneous.\r\n    self.units(UnitTypeId.MARINE).attack(target)\r\n\r\n    # ... other non-blocking code can execute here ...\r\n\r\n    # PATHWAY 2: QUERY (Blocking within this function)\r\n    # The 'await' keyword PAUSES on_step execution here.\r\n    pylon_location = await self.find_placement(UnitTypeId.PYLON, near=self.start_location)\r\n    \r\n    # <--- Time passes. The event loop runs. The game engine responds. ---\x3e\r\n    \r\n    # RESUME: Execution of on_step RESUMES from this point with the result.\r\n    if pylon_location:\r\n        # PATHWAY 1: COMMAND (Non-blocking)\r\n        # Adds a 'build' command to the same buffer.\r\n        self.build(UnitTypeId.PYLON, pylon_location)\r\n\r\n    # --- End of on_step execution ---\r\n    # NOW, the library sends the entire action buffer (containing both the\r\n    # 'attack' and 'build' commands) to the game engine in one batch.\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"architectural-justification",children:(0,i.jsx)(n.strong,{children:"Architectural Justification"})}),"\n",(0,i.jsx)(n.p,{children:"This dual-pathway system is a deliberate engineering design choice that optimizes for two different goals:"}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Commands optimize for throughput."})," By batching many commands together, the system can handle a very high volume of actions per second with minimal network overhead."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Queries optimize for latency."})," By pausing execution to wait for a response, the system ensures that your bot has the most up-to-date information possible before making a critical, data-dependent decision."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The guiding principle is simple: ",(0,i.jsx)(n.strong,{children:'"Tell, don\'t ask, unless you must."'})," This ensures your bot is both fast and intelligent."]})]})}function h(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);