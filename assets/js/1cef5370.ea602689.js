"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[4911],{5426:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>m,frontMatter:()=>s,metadata:()=>i,toc:()=>c});const i=JSON.parse('{"id":"Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.2 - Micro-management - Controlling Units in Combat","title":"6.2 - Micro-management - Controlling Units in Combat","description":"If macro-management is about building a bigger army, micro-management (\\"micro\\") is about making that army fight smarter. It is the fine-grained, real-time control of individual units in combat to maximize their value, minimize losses, and ultimately win battles against superior numbers.","source":"@site/docs/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.2 - Micro-management - Controlling Units in Combat.md","sourceDirName":"Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot","slug":"/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.2 - Micro-management - Controlling Units in Combat","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.2 - Micro-management - Controlling Units in Combat","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"6.1 - Macro-management - Expanding and Managing Your Economy","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.1 - Macro-management - Expanding and Managing Your Economy"},"next":{"title":"6.3 - Querying the Game - Checking for Pathing and Abilities","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 6 - Building a Smarter Bot/6.3 - Querying the Game - Checking for Pathing and Abilities"}}');var r=n(4848),a=n(8453);const s={},o=void 0,l={},c=[{value:"<strong>The Micro-management System</strong>",id:"the-micro-management-system",level:4},{value:"<strong>Core Micro Techniques: A Tactical Overview</strong>",id:"core-micro-techniques-a-tactical-overview",level:4},{value:"<strong>A Developer&#39;s Checklist for Micro Logic</strong>",id:"a-developers-checklist-for-micro-logic",level:4},{value:"<strong>Code Example: The &quot;Skirmisher&quot; Bot</strong>",id:"code-example-the-skirmisher-bot",level:4}];function d(e){const t={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.p,{children:'If macro-management is about building a bigger army, micro-management ("micro") is about making that army fight smarter. It is the fine-grained, real-time control of individual units in combat to maximize their value, minimize losses, and ultimately win battles against superior numbers.'}),"\n",(0,r.jsx)(t.p,{children:'Effective micro is the difference between a clumsy mob of units and a coordinated, intelligent fighting force. It is where a bot\'s "skill" truly shines.'}),"\n",(0,r.jsx)(t.h4,{id:"the-micro-management-system",children:(0,r.jsx)(t.strong,{children:"The Micro-management System"})}),"\n",(0,r.jsx)(t.p,{children:"Micro logic is a continuous, rapid decision-making loop that runs for each unit during combat."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"(For each unit in a fight...)\r\n          |\r\n          v\r\n.---- 1. ASSESS THREAT --------.\r\n| - Who is the biggest danger? |\r\n| - Am I in a bad position?    |\r\n`------------------------------`\r\n          |\r\n          v\r\n.--- 2. ASSESS SELF ----.\r\n| - Is my health low?   |\r\n| - Is my weapon ready? |\r\n`-----------------------`\r\n          |\r\n          v\r\n.---- 3. DECIDE & ACT --------.\r\n| - Retreat?                  |\r\n| - Reposition?               |\r\n| - Attack a priority target? |\r\n`-----------------------------`\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This loop runs inside your ",(0,r.jsx)(t.code,{children:"on_step"})," method, evaluating the state of each unit and issuing precise commands to optimize its performance."]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"core-micro-techniques-a-tactical-overview",children:(0,r.jsx)(t.strong,{children:"Core Micro Techniques: A Tactical Overview"})}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Technique"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Goal"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"How It Works"}),(0,r.jsxs)(t.th,{style:{textAlign:"left"},children:["Key ",(0,r.jsx)(t.code,{children:"python-sc2"})," Tool"]})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Focus Firing"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Eliminate threats quickly."})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Command all your units to attack the same high-value enemy target (e.g., a Siege Tank or High Templar)."}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"Units.closest_to()"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"army.attack(target)"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Kiting (Stutter-Step)"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Maximize damage, minimize risk."})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"For ranged units: move away from the enemy while your weapon is on cooldown, then stop to fire as soon as it's ready."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"unit.weapon_cooldown"})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Retreating Damaged Units"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Preserve your army."})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Pull individual, low-health units out of the fight to save them for later. A surviving unit is better than a dead one."}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"unit.health_percentage"}),(0,r.jsx)("br",{}),(0,r.jsx)(t.code,{children:"unit.move(safe_location)"})]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Splitting"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Mitigate splash damage."})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Move units away from each other to reduce the number hit by a single enemy area-of-effect attack (e.g., from a Baneling)."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"unit.move()"})})]})]})]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"a-developers-checklist-for-micro-logic",children:(0,r.jsx)(t.strong,{children:"A Developer's Checklist for Micro Logic"})}),"\n",(0,r.jsx)(t.p,{children:"When implementing micro for a group of units, this is your plan:"}),"\n",(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"1. Define a Threat."}),' Identify what constitutes a "dangerous" situation (e.g., enemy units are within a certain range).']}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"2. Select a Priority Target."})," Find the single most important enemy unit for the entire group to focus on."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"3. Loop Through Your Units."})," For each unit in your army:","\n",(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Check its individual condition (health, cooldowns)."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"Issue Commands Directly."})," Decide on its best action (attack the priority target, retreat, or reposition) and call the appropriate method (e.g., ",(0,r.jsx)(t.code,{children:"unit.attack(target)"}),"). The library will automatically queue and execute these at the end of the step."]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"code-example-the-skirmisher-bot",children:(0,r.jsx)(t.strong,{children:'Code Example: The "Skirmisher" Bot'})}),"\n",(0,r.jsxs)(t.p,{children:["This bot demonstrates two fundamental micro techniques: ",(0,r.jsx)(t.strong,{children:"focus firing"})," and ",(0,r.jsx)(t.strong,{children:"retreating damaged units"}),". It builds a force of Marines and, when it engages the enemy, it will intelligently focus fire and pull back weakened units to preserve its army."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# skirmisher_bot.py\r\n\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.data import Difficulty, Race\r\nfrom sc2.main import run_game\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.units import Units\r\n\r\nclass SkirmisherBot(BotAI):\r\n    """A bot that demonstrates focus firing and retreating damaged units."""\r\n\r\n    async def on_step(self, iteration: int):\r\n        # We need an army to command.\r\n        await self.build_army()\r\n\r\n        army: Units = self.units(UnitTypeId.MARINE)\r\n        if not army.exists:\r\n            return\r\n\r\n        # If there are no enemies, attack-move towards their base.\r\n        if not self.enemy_units.exists:\r\n            for unit in army.idle:\r\n                unit.attack(self.enemy_start_locations[0])\r\n            return\r\n\r\n        # --- Micro Logic Begins ---\r\n        # 1. Select a Priority Target for the entire army.\r\n        # We\'ll target the enemy unit with the lowest health to eliminate it quickly.\r\n        priority_target = self.enemy_units.sorted(lambda u: u.health).first\r\n\r\n        # 2. Define a safe retreat position.\r\n        retreat_position = self.start_location.towards(self.game_info.map_center, 15)\r\n\r\n        # 3. Loop through our units and issue a command for each.\r\n        for marine in army:\r\n            # If the marine is badly damaged, retreat it.\r\n            if marine.health_percentage < 0.4:\r\n                marine.move(retreat_position)\r\n            # Otherwise, command it to attack the priority target.\r\n            else:\r\n                marine.attack(priority_target)\r\n\r\n\r\n    async def build_army(self):\r\n        """A simple helper method to produce units for the demo."""\r\n        if self.supply_left < 2 and not self.already_pending(UnitTypeId.SUPPLYDEPOT):\r\n            if self.can_afford(UnitTypeId.SUPPLYDEPOT):\r\n                await self.build(UnitTypeId.SUPPLYDEPOT, near=self.start_location.towards(self.game_info.map_center, 5))\r\n\r\n        if not self.structures(UnitTypeId.BARRACKS).exists and not self.already_pending(UnitTypeId.BARRACKS):\r\n            if self.can_afford(UnitTypeId.BARRACKS):\r\n                await self.build(UnitTypeId.BARRACKS, near=self.start_location.towards(self.game_info.map_center, 8))\r\n\r\n        if self.structures(UnitTypeId.BARRACKS).ready.idle.exists and self.can_afford(UnitTypeId.MARINE):\r\n            self.train(UnitTypeId.MARINE)\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("GresvanAIE"),\r\n        [\r\n            Bot(Race.Terran, SkirmisherBot()),\r\n            Computer(Race.Zerg, Difficulty.Medium)\r\n        ],\r\n        realtime=True,\r\n    )\n'})})]})}function m(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>s,x:()=>o});var i=n(6540);const r={},a=i.createContext(r);function s(e){const t=i.useContext(a);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),i.createElement(a.Provider,{value:t},e.children)}}}]);