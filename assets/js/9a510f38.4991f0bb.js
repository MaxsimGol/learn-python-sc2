"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[5064],{7008:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.3 - The Power of Async and Await","title":"3.3 - The Power of Async and Await","description":"The async and await keywords are the engine of python-sc2. They are not optional features; they are the fundamental mechanism that allows your bot to remain responsive and intelligent. Understanding their purpose is non-negotiable for writing a functional bot.","source":"@site/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.3 - The Power of Async and Await.md","sourceDirName":"Part 2 - Core Concepts/Chapter 3 - The BotAI Class","slug":"/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.3 - The Power of Async and Await","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.3 - The Power of Async and Await","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"3.2 - The Game Loop","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.2 - The Game Loop"},"next":{"title":"4.1 - Static Info - Map Name, Size, and Start Locations","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.1 - Static Info - Map Name, Size, and Start Locations"}}');var r=t(4848),s=t(8453);const i={},a=void 0,l={},c=[{value:"<strong>The Core Problem: Your Bot is a Network Client</strong>",id:"the-core-problem-your-bot-is-a-network-client",level:4},{value:"<strong>The Solution: The Non-Blocking <code>asyncio</code> Model</strong>",id:"the-solution-the-non-blocking-asyncio-model",level:4},{value:"<strong>The Rules of Implementation: The <code>async</code>/<code>await</code> Contract</strong>",id:"the-rules-of-implementation-the-asyncawait-contract",level:4},{value:"<strong>The Most Common Mistake: The Forgotten <code>await</code></strong>",id:"the-most-common-mistake-the-forgotten-await",level:4},{value:"<strong>Code Example: A Tale of Two Pylons</strong>",id:"code-example-a-tale-of-two-pylons",level:4}];function d(e){const n={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["The ",(0,r.jsx)(n.code,{children:"async"})," and ",(0,r.jsx)(n.code,{children:"await"})," keywords are the engine of ",(0,r.jsx)(n.code,{children:"python-sc2"}),". They are not optional features; they are the fundamental mechanism that allows your bot to remain responsive and intelligent. Understanding their purpose is non-negotiable for writing a functional bot."]}),"\n",(0,r.jsx)(n.h4,{id:"the-core-problem-your-bot-is-a-network-client",children:(0,r.jsx)(n.strong,{children:"The Core Problem: Your Bot is a Network Client"})}),"\n",(0,r.jsx)(n.p,{children:"Every action your bot takes\u2014building a unit, moving a Marine, querying for resources\u2014is not an instant, local function call. It is a network request sent to the StarCraft II game engine, which then processes it and sends a response."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"+------------------+         (Commands & Queries)         +---------------+\r\n|                  | <----------------------------------\x3e |               |\r\n|  Your Python Bot |                                      |  SC2 Game     |\r\n|                  | <----------------------------------\x3e |   Engine      |\r\n+------------------+          (Game State & Acks)         +---------------+\r\n                      <- This round trip takes time ->\n"})}),"\n",(0,r.jsxs)(n.p,{children:["In a traditional, synchronous program, your code would ",(0,r.jsx)(n.strong,{children:"freeze"})," and wait for the game engine's response after every single command. For an RTS bot that needs to make hundreds of decisions per second, this is fatal."]}),"\n",(0,r.jsx)(n.h4,{id:"the-solution-the-non-blocking-asyncio-model",children:(0,r.jsxs)(n.strong,{children:["The Solution: The Non-Blocking ",(0,r.jsx)(n.code,{children:"asyncio"})," Model"]})}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)(n.code,{children:"asyncio"}),' allows your bot to be a "non-blocking" client. It can send a command and, instead of freezing, immediately yield control to work on other tasks. It\'s the difference between a worker who stops everything to watch a pot boil and one who starts the boil, then goes to chop vegetables, checking back periodically.']}),"\n",(0,r.jsxs)(n.table,{children:[(0,r.jsx)(n.thead,{children:(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Synchronous (Blocking) Bot"}),(0,r.jsx)(n.th,{style:{textAlign:"left"},children:"Asynchronous (Non-Blocking) Bot"})]})}),(0,r.jsxs)(n.tbody,{children:[(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:'1. Issues "build" command.'}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:'1. Issues "build" command.'})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["2. ",(0,r.jsx)(n.strong,{children:"FREEZES"}),". Waits for SC2 to confirm."]}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["2. ",(0,r.jsx)(n.strong,{children:"YIELDS"}),". Immediately moves on."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"3. (Waits...)"}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:'3. Issues "attack" command.'})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"4. (Waits...)"}),(0,r.jsxs)(n.td,{style:{textAlign:"left"},children:["4. ",(0,r.jsx)(n.strong,{children:"YIELDS"}),". Immediately moves on."]})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:'5. Receives "build" confirmation.'}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"5. Checks if it can afford an upgrade."})]}),(0,r.jsxs)(n.tr,{children:[(0,r.jsx)(n.td,{style:{textAlign:"left"},children:'6. Finally issues "attack" command.'}),(0,r.jsx)(n.td,{style:{textAlign:"left"},children:"6. (Receives confirmations in the background)."})]})]})]}),"\n",(0,r.jsx)(n.p,{children:"The asynchronous bot accomplishes far more in the same amount of time, making it an effective RTS player."}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"the-rules-of-implementation-the-asyncawait-contract",children:(0,r.jsxs)(n.strong,{children:["The Rules of Implementation: The ",(0,r.jsx)(n.code,{children:"async"}),"/",(0,r.jsx)(n.code,{children:"await"})," Contract"]})}),"\n",(0,r.jsx)(n.p,{children:"To use this model, you must adhere to a simple two-part contract."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:'.------------------------------------------.\r\n| async def my_method(self):               |  <-- Marks a function as a "coroutine"\r\n|                                          |      that can be paused.\r\n|     # Do some logic...                   |\r\n|                                          |\r\n|     await some_game_action()             |  <-- Pauses the coroutine here until the\r\n|                                          |      action is acknowledged by the game.\r\n|     # Continue logic after ack...        |\r\n`------------------------------------------`\n'})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Implementation Checklist:"})}),"\n",(0,r.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsxs)(n.strong,{children:["Rule 1: Define with ",(0,r.jsx)(n.code,{children:"async def"}),"."]})," Any method that contains a game action or query (",(0,r.jsx)(n.code,{children:"on_step"}),", ",(0,r.jsx)(n.code,{children:"on_start"}),", your own helper functions) ",(0,r.jsx)(n.strong,{children:"must"})," be defined with ",(0,r.jsx)(n.code,{children:"async def"}),"."]}),"\n",(0,r.jsxs)(n.li,{className:"task-list-item",children:[(0,r.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,r.jsxs)(n.strong,{children:["Rule 2: Call with ",(0,r.jsx)(n.code,{children:"await"}),"."]})," Any function call that communicates with the game (e.g., ",(0,r.jsx)(n.code,{children:"self.build"}),", ",(0,r.jsx)(n.code,{children:"unit.attack"}),", ",(0,r.jsx)(n.code,{children:"self.expand_now"}),") ",(0,r.jsx)(n.strong,{children:"must"})," be preceded by the ",(0,r.jsx)(n.code,{children:"await"})," keyword."]}),"\n"]}),"\n",(0,r.jsx)(n.hr,{}),"\n",(0,r.jsx)(n.h4,{id:"the-most-common-mistake-the-forgotten-await",children:(0,r.jsxs)(n.strong,{children:["The Most Common Mistake: The Forgotten ",(0,r.jsx)(n.code,{children:"await"})]})}),"\n",(0,r.jsxs)(n.p,{children:["Forgetting ",(0,r.jsx)(n.code,{children:"await"})," is the #1 error for new ",(0,r.jsx)(n.code,{children:"python-sc2"})," developers.\r\nIf you call an ",(0,r.jsx)(n.code,{children:"async"})," function without ",(0,r.jsx)(n.code,{children:"await"}),", ",(0,r.jsx)(n.strong,{children:"the action will simply not happen."})]}),"\n",(0,r.jsx)(n.h4,{id:"code-example-a-tale-of-two-pylons",children:(0,r.jsx)(n.strong,{children:"Code Example: A Tale of Two Pylons"})}),"\n",(0,r.jsx)(n.p,{children:"This bot tries to build two Pylons. One command is issued correctly, the other is not. Observe the difference in both the game and your console output."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-python",children:'from sc2.main import run_game\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.data import Race, Difficulty\r\n\r\n\r\nclass AwaitBot(BotAI):\r\n    """A bot to demonstrate the critical importance of \'await\'."""\r\n\r\n    async def on_step(self, iteration: int):\r\n        # We want this logic to run only once, as soon as we can afford the Pylons.\r\n        # This checks if we have no Pylons and none are pending construction.\r\n        if (\r\n            self.structures(UnitTypeId.PYLON).amount\r\n            + self.already_pending(UnitTypeId.PYLON)\r\n            == 0\r\n        ):\r\n            # We wait until we can afford Pylon for the demonstration.\r\n            if self.can_afford(UnitTypeId.PYLON):\r\n                await self._build_pylons_correctly()\r\n        elif self.structures(UnitTypeId.PYLON).amount == 1:\r\n            if self.can_afford(UnitTypeId.PYLON):\r\n                await self._build_pylons_incorrectly()\r\n\r\n    async def _build_pylons_correctly(self):\r\n        """This function correctly awaits the build command."""\r\n        print("ACTION: Issuing CORRECT build command for Pylon 1...")\r\n        if self.workers.exists:\r\n            # CORRECT: The \'await\' keyword ensures the command is sent and processed.\r\n            await self.build(UnitTypeId.PYLON, near=self.workers.first)\r\n\r\n    async def _build_pylons_incorrectly(self):\r\n        """\r\n        This function is correctly defined with \'async def\' but forgets\r\n        to await the build command internally.\r\n        """\r\n        print("ACTION: Issuing INCORRECT build command for Pylon 2...")\r\n        if self.workers.exists:\r\n            # INCORRECT: This creates a coroutine object but never runs it.\r\n            # Select a random idle worker\r\n            idle_worker = self.workers.idle.random\r\n            # It does nothing in-game and will raise a RuntimeWarning.\r\n            self.build(UnitTypeId.PYLON, near=idle_worker, build_worker=idle_worker)\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("AbyssalReefLE"),\r\n        [Bot(Race.Protoss, AwaitBot()), Computer(Race.Zerg, Difficulty.Easy)],\r\n        realtime=True,\r\n    )\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);