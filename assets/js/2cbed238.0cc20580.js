"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[2614],{7442:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>o,contentTitle:()=>l,default:()=>h,frontMatter:()=>a,metadata:()=>r,toc:()=>d});const r=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.3 - Understanding Units - The Unit Attributes","title":"4.3 - Understanding Units - The Unit Attributes","description":"Every single entity on the battlefield\u2014from a Marine to a mineral patch, from a Pylon to a flying Overlord\u2014is represented in your code as a Unit object. This is the most fundamental data structure in python-sc2. It is both a data container and an actor: it holds all the information about an entity, and it is the object you use to issue it commands.","source":"@site/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.3 - Understanding Units - The Unit Attributes.md","sourceDirName":"Part 2 - Core Concepts/Chapter 4 - Reading the Game State","slug":"/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.3 - Understanding Units - The Unit Attributes","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.3 - Understanding Units - The Unit Attributes","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"4.2 - Dynamic Info- Minerals, Supply, and Time","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.2 - Dynamic Info- Minerals, Supply, and Time"},"next":{"title":"4.4 - Managing Groups- The Units Collection","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 4 - Reading the Game State/4.4 - Managing Groups- The Units Collection"}}');var s=t(4848),i=t(8453);const a={},l=void 0,o={},d=[{value:"<strong>A Mental Model: The <code>Unit</code> as a Class</strong>",id:"a-mental-model-the-unit-as-a-class",level:4},{value:"<strong>How to Get a <code>Unit</code> Object</strong>",id:"how-to-get-a-unit-object",level:4},{value:"<strong>Key <code>Unit</code> Attributes: A Developer&#39;s Reference</strong>",id:"key-unit-attributes-a-developers-reference",level:4},{value:"<strong>A Developer&#39;s Checklist for Using a <code>Unit</code></strong>",id:"a-developers-checklist-for-using-a-unit",level:4},{value:"<strong>Code Example: The Field Commander Bot</strong>",id:"code-example-the-field-commander-bot",level:4}];function c(e){const n={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["Every single entity on the battlefield\u2014from a Marine to a mineral patch, from a Pylon to a flying Overlord\u2014is represented in your code as a ",(0,s.jsx)(n.code,{children:"Unit"})," object. This is the most fundamental data structure in ",(0,s.jsx)(n.code,{children:"python-sc2"}),". It is both a data container and an actor: it holds all the information about an entity, and it is the object you use to issue it commands."]}),"\n",(0,s.jsxs)(n.p,{children:["Mastering the ",(0,s.jsx)(n.code,{children:"Unit"})," object is non-negotiable. It is how you will read the battlefield, manage your base, and control your army."]}),"\n",(0,s.jsx)(n.h4,{id:"a-mental-model-the-unit-as-a-class",children:(0,s.jsxs)(n.strong,{children:["A Mental Model: The ",(0,s.jsx)(n.code,{children:"Unit"})," as a Class"]})}),"\n",(0,s.jsx)(n.p,{children:"Think of every unit in the game as an instance of a class. The object holds the unit's current state and provides methods to change that state."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:'       +------------------------------------+\r\n       |         Unit (e.g., Marine)        |\r\n       |====================================|\r\n       |          -- Properties --          |  <-- Data you can READ\r\n       |   name: "Marine"                   |\r\n       |   health: 45                       |\r\n       |   position: Point2(34.5, 67.5)     |\r\n       |   is_idle: True                    |\r\n       |   ...                              |\r\n       |------------------------------------|\r\n       |           -- Methods --            |  <-- Actions you can CALL\r\n       |   + attack(target)                 |\r\n       |   + move(position)                 |\r\n       |   + hold_position()                |\r\n       |   ...                              |\r\n       +------------------------------------+\n'})}),"\n",(0,s.jsx)(n.h4,{id:"how-to-get-a-unit-object",children:(0,s.jsxs)(n.strong,{children:["How to Get a ",(0,s.jsx)(n.code,{children:"Unit"})," Object"]})}),"\n",(0,s.jsxs)(n.p,{children:["You will almost never create a ",(0,s.jsx)(n.code,{children:"Unit"})," object manually. Instead, you will retrieve them from the game state using the helper properties on ",(0,s.jsx)(n.code,{children:"self"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:"# Get a single Unit object representing your first townhall.\r\nmy_townhall = self.townhalls.first\r\n\r\n# Get a single Unit object representing a random idle worker.\r\nidle_worker = self.workers.idle.random_or(None)\r\n\r\n# Loop through a collection of Unit objects.\r\nfor marine in self.units(UnitTypeId.MARINE):\r\n    # 'marine' is a Unit object.\r\n    if marine.is_idle:\r\n        print(f\"Found an idle marine with tag {marine.tag}\")\n"})}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"key-unit-attributes-a-developers-reference",children:(0,s.jsxs)(n.strong,{children:["Key ",(0,s.jsx)(n.code,{children:"Unit"})," Attributes: A Developer's Reference"]})}),"\n",(0,s.jsxs)(n.p,{children:["Once you have a ",(0,s.jsx)(n.code,{children:"Unit"})," object, you can inspect its attributes to make decisions."]}),"\n",(0,s.jsxs)(n.table,{children:[(0,s.jsx)(n.thead,{children:(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Category"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Attribute"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Data Type"}),(0,s.jsx)(n.th,{style:{textAlign:"left"},children:"Use Case in a Project"})]})}),(0,s.jsxs)(n.tbody,{children:[(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Identity"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"name"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"type_id"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"tag"})]}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"str"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"UnitTypeId"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"int"})]}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsxs)(n.strong,{children:[(0,s.jsx)(n.code,{children:"type_id"})," is best for checks."]})," Use ",(0,s.jsx)(n.code,{children:"tag"})," to uniquely identify a unit throughout a match."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Vitals"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"health"}),", ",(0,s.jsx)(n.code,{children:"health_max"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"shield"}),", ",(0,s.jsx)(n.code,{children:"shield_max"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"energy"}),", ",(0,s.jsx)(n.code,{children:"energy_max"})]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"float"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Check health to decide if a unit should retreat. Check energy to see if a caster can use an ability."})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Position"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"position"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"radius"})]}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"Point2"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"float"})]}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"position"})," is essential for all movement and distance calculations."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Combat"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"weapon_cooldown"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"is_attacking"})]}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"float"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"bool"})]}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"weapon_cooldown"})," is the key to advanced micro-management like stutter-stepping."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"State Flags"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"is_idle"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"is_flying"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"is_powered"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"is_burrowed"})]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"bool"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:["These booleans are the most common conditions in ",(0,s.jsx)(n.code,{children:"if"})," statements for managing unit behavior."]})]}),(0,s.jsxs)(n.tr,{children:[(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.strong,{children:"Ownership"})}),(0,s.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,s.jsx)(n.code,{children:"is_yours"}),(0,s.jsx)("br",{}),(0,s.jsx)(n.code,{children:"is_enemy"})]}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:(0,s.jsx)(n.code,{children:"bool"})}),(0,s.jsx)(n.td,{style:{textAlign:"left"},children:"Crucial for distinguishing your units from the opponent's."})]})]})]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"a-developers-checklist-for-using-a-unit",children:(0,s.jsxs)(n.strong,{children:["A Developer's Checklist for Using a ",(0,s.jsx)(n.code,{children:"Unit"})]})}),"\n",(0,s.jsxs)(n.p,{children:["When your code gets a ",(0,s.jsx)(n.code,{children:"Unit"})," object, this is your thought process:"]}),"\n",(0,s.jsxs)(n.ul,{className:"contains-task-list",children:["\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"1. Identify It:"})," What is this unit? (",(0,s.jsx)(n.code,{children:"if unit.type_id == UnitTypeId.MARINE:"}),")"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"2. Check Its State:"})," Is it doing what it should be? (",(0,s.jsx)(n.code,{children:"if unit.is_idle:"}),")"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"3. Assess Its Condition:"})," Is it healthy enough to fight? (",(0,s.jsx)(n.code,{children:"if (unit.health / unit.health_max) < 0.4:"}),")"]}),"\n",(0,s.jsxs)(n.li,{className:"task-list-item",children:[(0,s.jsx)(n.input,{type:"checkbox",disabled:!0})," ",(0,s.jsx)(n.strong,{children:"4. Give It an Order:"})," If it's not doing the right thing, issue a command (",(0,s.jsx)(n.code,{children:"unit.attack(...)"}),")."]}),"\n"]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsx)(n.h4,{id:"code-example-the-field-commander-bot",children:(0,s.jsx)(n.strong,{children:"Code Example: The Field Commander Bot"})}),"\n",(0,s.jsxs)(n.p,{children:['This bot demonstrates the full "Sense-Think-Act" cycle on individual ',(0,s.jsx)(n.code,{children:"Unit"})," objects. It finds idle Marines and sends them to attack, and pulls back any Marine that is badly damaged."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'# field_commander_bot.py\r\n\r\nfrom sc2.main import run_game\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.data import Difficulty, Race\r\n\r\n\r\nclass FieldCommanderBot(BotAI):\r\n    """\r\n    Implements a basic Terran strategy focused on Marine production and simple combat micro.\r\n\r\n    This bot\'s architecture is divided by functional responsibility:\r\n    - Economy (building workers)\r\n    - Production (building structures and training units)\r\n    - Army Management (controlling military units)\r\n    """\r\n\r\n    async def on_step(self, iteration: int):\r\n        """\r\n        Main entry point for bot logic, executed on each game step.\r\n        Orchestrates high-level functions in a specific order.\r\n        """\r\n        # The first action is always to make sure our workers are busy.\r\n        # \'await\' is used because these functions can take time to execute.\r\n        await self.distribute_workers()\r\n        await self.manage_production()\r\n        await self.manage_army()\r\n\r\n    # =================================================================\r\n    # PRODUCTION & ECONOMY\r\n    # =================================================================\r\n\r\n    async def manage_production(self):\r\n        """Coordinates the building of workers, structures, and units."""\r\n        await self.build_workers()\r\n        await self.build_supply_depots()\r\n        await self.build_barracks()\r\n        await self.train_marines()\r\n\r\n    async def build_workers(self):\r\n        """Trains SCVs up to a saturation point of 16."""\r\n        # The `already_pending` check prevents queuing multiple units at once.\r\n        if (\r\n            self.townhalls.ready\r\n            and self.can_afford(UnitTypeId.SCV)\r\n            and self.supply_workers < 16\r\n            and self.already_pending(UnitTypeId.SCV) == 0\r\n        ):\r\n            self.townhalls.ready.random.train(UnitTypeId.SCV)\r\n\r\n    async def build_supply_depots(self):\r\n        """Prevents getting supply-blocked by building depots when supply is low."""\r\n        if (\r\n            self.supply_left < 5\r\n            and self.can_afford(UnitTypeId.SUPPLYDEPOT)\r\n            and self.already_pending(UnitTypeId.SUPPLYDEPOT) == 0\r\n        ):\r\n            # `build` automatically finds a worker and a valid build location.\r\n            await self.build(UnitTypeId.SUPPLYDEPOT, near=self.townhalls.ready.random)\r\n\r\n    async def build_barracks(self):\r\n        """Builds a single Barracks once a Supply Depot is complete."""\r\n        # Check prerequisite: a completed Supply Depot must exist.\r\n        if not self.structures(UnitTypeId.SUPPLYDEPOT).ready.exists:\r\n            return\r\n\r\n        # Limit to one Barracks for this simple strategy.\r\n        if (\r\n            not self.structures(UnitTypeId.BARRACKS).exists\r\n            and self.can_afford(UnitTypeId.BARRACKS)\r\n            and self.already_pending(UnitTypeId.BARRACKS) == 0\r\n        ):\r\n            await self.build(UnitTypeId.BARRACKS, near=self.townhalls.ready.random)\r\n\r\n    async def train_marines(self):\r\n        """Trains Marines from any idle Barracks."""\r\n        for barracks in self.structures(UnitTypeId.BARRACKS).ready.idle:\r\n            if self.can_afford(UnitTypeId.MARINE) and self.supply_left > 0:\r\n                barracks.train(UnitTypeId.MARINE)\r\n\r\n    # =================================================================\r\n    # ARMY MANAGEMENT\r\n    # =================================================================\r\n\r\n    async def manage_army(self):\r\n        """Coordinates all army movements and actions."""\r\n        target = self.find_target()\r\n        await self.command_marines(target)\r\n\r\n    def find_target(self):\r\n        """\r\n        Determines a target for the army.\r\n        Prioritizes visible enemy structures, falls back to enemy start location.\r\n        """\r\n        if self.enemy_structures.exists:\r\n            return self.enemy_structures.random.position\r\n        return self.enemy_start_locations[0]\r\n\r\n    async def command_marines(self, target):\r\n        """Iterates through all Marines and issues an individual command."""\r\n        for marine in self.units(UnitTypeId.MARINE):\r\n            self.command_individual_marine(marine, target)\r\n\r\n    def command_individual_marine(self, marine, target):\r\n        """\r\n        Applies micro-management logic to a single Marine.\r\n        """\r\n        # Retreat if health is below 50%\r\n        if marine.health / marine.health_max < 0.5:\r\n            # The \'move\' command is for retreating, as units will not stop to fight.\r\n            marine.move(self.start_location)\r\n        # Attack if idle and not retreating\r\n        elif marine.is_idle:\r\n            # The \'attack\' command engages any enemies encountered on the way to the target.\r\n            marine.attack(target)\r\n\r\n\r\n# =================================================================\r\n# LAUNCHER\r\n# =================================================================\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("AbyssalReefLE"),\r\n        [Bot(Race.Terran, FieldCommanderBot()), Computer(Race.Zerg, Difficulty.Easy)],\r\n        realtime=True,\r\n    )\r\n\n'})})]})}function h(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>l});var r=t(6540);const s={},i=r.createContext(s);function a(e){const n=r.useContext(i);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function l(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(i.Provider,{value:n},e.children)}}}]);