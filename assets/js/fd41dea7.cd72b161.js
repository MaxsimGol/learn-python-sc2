"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[9817],{7087:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>h,frontMatter:()=>l,metadata:()=>r,toc:()=>c});const r=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.3 - Worker Commands- Gather and Build","title":"5.3 - Worker Commands- Gather and Build","description":"Worker units are the engine of your economy and the architects of your base. They have two primary, specialized commands: gather for harvesting resources and build for constructing structures. While gathering is a simple \\"fire-and-forget\\" command, building requires a more deliberate, multi-step process.","source":"@site/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.3 - Worker Commands- Gather and Build.md","sourceDirName":"Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions","slug":"/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.3 - Worker Commands- Gather and Build","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.3 - Worker Commands- Gather and Build","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"5.2 - Basic Commands- Attack, Move, Stop","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.2 - Basic Commands- Attack, Move, Stop"},"next":{"title":"5.4 - Production- Training Units and Researching Upgrades","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 5 - Issuing Commands - Actions/5.4 - Production- Training Units and Researching Upgrades"}}');var i=t(4848),s=t(8453);const l={},o=void 0,d={},c=[{value:"<strong>The <code>gather</code> Command: Your Economic Engine</strong>",id:"the-gather-command-your-economic-engine",level:4},{value:"<strong>The Build Request Lifecycle</strong>",id:"the-build-request-lifecycle",level:4},{value:"<strong>Key Functions for Building</strong>",id:"key-functions-for-building",level:4},{value:"<strong>Deep Dive: <code>self.find_placement()</code></strong>",id:"deep-dive-selffind_placement",level:4},{value:"<strong>Code Example: The Architect Bot</strong>",id:"code-example-the-architect-bot",level:4}];function a(e){const n={code:"code",h4:"h4",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(n.p,{children:["Worker units are the engine of your economy and the architects of your base. They have two primary, specialized commands: ",(0,i.jsx)(n.code,{children:"gather"})," for harvesting resources and ",(0,i.jsx)(n.code,{children:"build"}),' for constructing structures. While gathering is a simple "fire-and-forget" command, building requires a more deliberate, multi-step process.']}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"the-gather-command-your-economic-engine",children:(0,i.jsxs)(n.strong,{children:["The ",(0,i.jsx)(n.code,{children:"gather"})," Command: Your Economic Engine"]})}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"gather"})," command is the simplest and most fundamental worker action."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Signature:"})," ",(0,i.jsx)(n.code,{children:"worker.gather(target)"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Target:"})," A ",(0,i.jsx)(n.code,{children:"Unit"})," object that is a ",(0,i.jsx)(n.code,{children:"MineralField"})," or ",(0,i.jsx)(n.code,{children:"VespeneGeyser"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.strong,{children:"Behavior:"})," The worker will travel to the resource, harvest it, return it to the nearest townhall, and ",(0,i.jsx)(n.strong,{children:"continue this loop indefinitely."})," You only need to issue this command once per worker."]}),"\n"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"# A common pattern: find idle workers and put them to work.\r\nfor worker in self.workers.idle:\r\n    # Find the closest mineral patch to this specific worker.\r\n    closest_mineral_patch = self.mineral_field.closest_to(worker)\r\n    # Issue the gather command.\r\n    self.do(worker.gather(closest_mineral_patch))\n"})}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"the-build-request-lifecycle",children:(0,i.jsx)(n.strong,{children:"The Build Request Lifecycle"})}),"\n",(0,i.jsx)(n.p,{children:"Constructing a building is not a single command but a workflow. You must first ask the game for a valid location before you can command a worker to build there."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"(You decide to build a Pylon)\r\n          |\r\n          v\r\n.---- CAN I BUILD? -------------.\r\n| - self.can_afford()           |\r\n| - self.already_pending() == 0 |\r\n`-------------------------------`\r\n          | (Yes)\r\n          v\r\n.---- WHERE TO BUILD? -------------------.\r\n| location = await self.find_placement() |\r\n`----------------------------------------`\r\n          | (Location is valid)\r\n          v\r\n.---- ISSUE COMMAND ----------------.\r\n| await self.build(PYLON, location) |\r\n`-----------------------------------`\r\n          |\r\n          v\r\n(Worker begins construction)\n"})}),"\n",(0,i.jsx)(n.p,{children:"This lifecycle prevents errors and ensures your bot doesn't try to build in illegal locations or waste resources on redundant structures."}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"key-functions-for-building",children:(0,i.jsx)(n.strong,{children:"Key Functions for Building"})}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Function"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Signature"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Role in the Lifecycle"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"self.can_afford(unit_id)"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"(UnitTypeId) -> bool"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.strong,{children:"Condition Check."})," Returns ",(0,i.jsx)(n.code,{children:"True"})," if you have enough minerals and gas for a given unit or structure."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"self.already_pending(unit_id)"})})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.code,{children:"(UnitTypeId) -> int"})," or ",(0,i.jsx)(n.code,{children:"float"})]}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.strong,{children:"Condition Check."})," Returns the number of a given unit/structure type currently in production. Essential for avoiding duplicates."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"self.find_placement(...)"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"(UnitTypeId, near, ...) -> Point2 or None"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.strong,{children:"Location Finding."})," Asks the game for a valid build spot. This is an ",(0,i.jsx)(n.code,{children:"async"})," function and must be awaited."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.strong,{children:(0,i.jsx)(n.code,{children:"self.build(...)"})})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"(UnitTypeId, near_or_location) -> UnitCommand"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.strong,{children:"Action Issuing."})," The high-level helper that finds a worker and issues the final build command. This is also ",(0,i.jsx)(n.code,{children:"async"}),"."]})]})]})]}),"\n",(0,i.jsx)(n.h4,{id:"deep-dive-selffind_placement",children:(0,i.jsxs)(n.strong,{children:["Deep Dive: ",(0,i.jsx)(n.code,{children:"self.find_placement()"})]})}),"\n",(0,i.jsx)(n.p,{children:"This is a powerful but potentially slow function. Understanding its parameters is key to using it effectively."}),"\n",(0,i.jsxs)(n.table,{children:[(0,i.jsx)(n.thead,{children:(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Parameter"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Type"}),(0,i.jsx)(n.th,{style:{textAlign:"left"},children:"Description"})]})}),(0,i.jsxs)(n.tbody,{children:[(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"building"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"UnitTypeId"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.strong,{children:"Required."})," The specific building you want to place (e.g., ",(0,i.jsx)(n.code,{children:"UnitTypeId.PYLON"}),")."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"near"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"Point2"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:[(0,i.jsx)(n.strong,{children:"Required."})," The center point of the search area."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"max_distance"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"int"})}),(0,i.jsxs)(n.td,{style:{textAlign:"left"},children:["The maximum radius to search from the ",(0,i.jsx)(n.code,{children:"near"})," point. Defaults to 20."]})]}),(0,i.jsxs)(n.tr,{children:[(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"placement_step"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:(0,i.jsx)(n.code,{children:"int"})}),(0,i.jsx)(n.td,{style:{textAlign:"left"},children:"The grid size of the search. A higher value (e.g., 5) is faster but less precise. A lower value (e.g., 1) is slower but will find tighter spots. Defaults to 2."})]})]})]}),"\n",(0,i.jsx)(n.hr,{}),"\n",(0,i.jsx)(n.h4,{id:"code-example-the-architect-bot",children:(0,i.jsx)(n.strong,{children:"Code Example: The Architect Bot"})}),"\n",(0,i.jsx)(n.p,{children:'This bot demonstrates a robust and scalable building system. Instead of reacting instantly, it uses a simple list as a "build queue" to manage its construction projects, tackling one at a time.'}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'# architect_bot.py\r\n\r\nfrom collections import deque\r\nfrom sc2 import maps\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.data import Difficulty, Race\r\nfrom sc2.main import run_game\r\nfrom sc2.player import Bot, Computer\r\nfrom sc2.ids.unit_typeid import UnitTypeId\r\n\r\nclass ArchitectBot(BotAI):\r\n    """A bot that uses a build queue to manage construction projects."""\r\n    def __init__(self):\r\n        super().__init__()\r\n        # Use a deque as a simple, efficient queue.\r\n        self.build_queue = deque()\r\n\r\n    async def on_step(self, iteration: int):\r\n        await self.distribute_workers()\r\n        self.update_build_queue()\r\n        await self.execute_build_queue()\r\n\r\n    def update_build_queue(self):\r\n        """Adds required buildings to the queue."""\r\n        # Queue a Supply Depot if we are running low on supply.\r\n        if (\r\n            self.supply_left < 5\r\n            and self.already_pending(UnitTypeId.SUPPLYDEPOT) == 0\r\n            and UnitTypeId.SUPPLYDEPOT not in self.build_queue\r\n        ):\r\n            self.build_queue.append(UnitTypeId.SUPPLYDEPOT)\r\n\r\n        # Queue a Barracks if we have a depot but no barracks.\r\n        if (\r\n            self.structures(UnitTypeId.SUPPLYDEPOT).ready.exists\r\n            and not self.structures(UnitTypeId.BARRACKS).exists\r\n            and self.already_pending(UnitTypeId.BARRACKS) == 0\r\n            and UnitTypeId.BARRACKS not in self.build_queue\r\n        ):\r\n            self.build_queue.append(UnitTypeId.BARRACKS)\r\n\r\n    async def execute_build_queue(self):\r\n        """Works on the first item in the build queue."""\r\n        if not self.build_queue:\r\n            return\r\n\r\n        # Get the next building project from the front of the queue.\r\n        building_to_construct = self.build_queue[0]\r\n\r\n        # Check if we can afford the project.\r\n        if self.can_afford(building_to_construct):\r\n            # Find a location for the building.\r\n            build_location = await self.find_placement(\r\n                building_to_construct, near=self.start_location, placement_step=5\r\n            )\r\n\r\n            if build_location:\r\n                # Issue the build command.\r\n                await self.build(building_to_construct, build_location)\r\n                # Remove the completed project from the queue.\r\n                self.build_queue.popleft()\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("BlackburnAIE"),\r\n        [\r\n            Bot(Race.Terran, ArchitectBot()),\r\n            Computer(Race.Zerg, Difficulty.VeryEasy)\r\n        ],\r\n        realtime=True,\r\n    )\n'})})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>l,x:()=>o});var r=t(6540);const i={},s=r.createContext(i);function l(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);