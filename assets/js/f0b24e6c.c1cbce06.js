"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[2465],{8221:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>l,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});const s=JSON.parse('{"id":"Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.2 - The Game Loop","title":"3.2 - The Game Loop","description":"Your bot\'s code does not run all at once. It\'s an event-driven program that reacts to the game\'s state. The BotAI class provides a \\"three-act structure\\" for your bot\'s life within a match, giving you specific entry points to insert your logic. Understanding this flow is essential for building a well-structured AI.","source":"@site/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.2 - The Game Loop.md","sourceDirName":"Part 2 - Core Concepts/Chapter 3 - The BotAI Class","slug":"/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.2 - The Game Loop","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.2 - The Game Loop","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"3.1 - The Heart of Your Bot","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.1 - The Heart of Your Bot"},"next":{"title":"3.3 - The Power of Async and Await","permalink":"/learn-python-sc2/docs/Part 2 - Core Concepts/Chapter 3 - The BotAI Class/3.3 - The Power of Async and Await"}}');var r=n(4848),i=n(8453);const o={},l=void 0,a={},c=[{value:"<strong>The Execution Flow</strong>",id:"the-execution-flow",level:4},{value:"<strong>The Lifecycle Methods: A Comparison</strong>",id:"the-lifecycle-methods-a-comparison",level:4},{value:"<strong>Code Example: A Lifecycle in Action</strong>",id:"code-example-a-lifecycle-in-action",level:4}];function d(e){const t={code:"code",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["Your bot's code does not run all at once. It's an event-driven program that reacts to the game's state. The ",(0,r.jsx)(t.code,{children:"BotAI"}),' class provides a "three-act structure" for your bot\'s life within a match, giving you specific entry points to insert your logic. Understanding this flow is essential for building a well-structured AI.']}),"\n",(0,r.jsx)(t.h4,{id:"the-execution-flow",children:(0,r.jsx)(t.strong,{children:"The Execution Flow"})}),"\n",(0,r.jsx)(t.p,{children:"This diagram illustrates the guaranteed order of execution for the primary lifecycle methods."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:"(Game Client Loads)\r\n         |\r\n         v\r\n.--- on_start() --.\r\n| (Runs ONCE)     |\r\n`-----------------`\r\n         |\r\n         v\r\n.--- on_step() ---.\r\n| (Loops)         | <------.\r\n| - Perceive      |        |\r\n| - Decide        |        | (Runs ~22 times/sec)\r\n| - Act           |        |\r\n`-----------------`--------`\r\n         |\r\n         | (Game Ends)\r\n         v\r\n.--- on_end() ----.\r\n| (Runs ONCE)     |\r\n`-----------------`\r\n         |\r\n         v\r\n(Program Exits)\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"the-lifecycle-methods-a-comparison",children:(0,r.jsx)(t.strong,{children:"The Lifecycle Methods: A Comparison"})}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Method"}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"async def on_start(self)"})}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"async def on_step(self, iteration: int)"})}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"async def on_end(self, game_result: Result)"})})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"When It Runs"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.strong,{children:"Once"}),", at the very beginning of the match."]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.strong,{children:"Repeatedly"}),", on every game tick (~22.4 times/sec)."]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.strong,{children:"Once"}),", after the match has concluded."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Core Purpose"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.strong,{children:"Initialization."})," Set up state and perform one-time calculations."]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.strong,{children:"Execution."})," The main loop for all real-time decision-making."]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.strong,{children:"Analysis & Cleanup."})," Save data and log the final outcome."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Key Parameters"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"self"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"iteration"}),": The game frame counter."]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"game_result"}),": The final outcome (Victory, Defeat)."]})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Common Uses"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["- Print bot strategy",(0,r.jsx)("br",{}),"- Analyze map layout",(0,r.jsx)("br",{}),"- Set initial state (",(0,r.jsx)(t.code,{children:"self.is_attacking = False"}),")"]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["- Manage economy",(0,r.jsx)("br",{}),"- Control the army",(0,r.jsx)("br",{}),"- Scout the enemy",(0,r.jsx)("br",{}),"- Execute build orders"]}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:["- Log win/loss rates",(0,r.jsx)("br",{}),"- Save learned data to a file",(0,r.jsx)("br",{}),"- Analyze replay data"]})]})]})]}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"code-example-a-lifecycle-in-action",children:(0,r.jsx)(t.strong,{children:"Code Example: A Lifecycle in Action"})}),"\n",(0,r.jsx)(t.p,{children:"This bot demonstrates the full lifecycle, logs its state at each phase, and uses a time-based trigger to end the game."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Checklist for This Bot:"})}),"\n",(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Use ",(0,r.jsx)(t.code,{children:"on_start"})," to set up an initial state."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Use ",(0,r.jsx)(t.code,{children:"on_step"})," with a time-based condition to perform a primary action."]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ","Use ",(0,r.jsx)(t.code,{children:"on_end"})," to analyze and report the final result."]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'# lifecycle_bot.py\r\n\r\nfrom sc2.main import run_game\r\nfrom sc2.bot_ai import BotAI\r\nfrom sc2.data import Result, Race\r\nfrom sc2.player import Bot, Computer, Difficulty\r\nfrom sc2 import maps\r\n\r\n# Constants are better than magic numbers in your code.\r\nGAME_DURATION_SECONDS = 45\r\n\r\n\r\nclass LifecycleBot(BotAI):\r\n    """A bot to demonstrate the on_start, on_step, and on_end lifecycle."""\r\n\r\n    async def on_start(self):\r\n        """Setup actions at the start of the game."""\r\n        self.start_time = self.time\r\n        print(f"[{self.time_formatted}] Lifecycle: on_start() initiated.")\r\n        print(f"INFO: This game will run for {GAME_DURATION_SECONDS} seconds.")\r\n\r\n    async def on_step(self, iteration: int):\r\n        """Core logic, executed on every game tick."""\r\n\r\n        if iteration == 0:\r\n            print(f"[{self.time_formatted}] Lifecycle: on_step() first iteration.")\r\n\r\n        # The main action: leave the game after a set time has passed.\r\n        if self.time - self.start_time > GAME_DURATION_SECONDS:\r\n            print(\r\n                f"[{self.time_formatted}] ACTION: Game duration reached. Leaving game..."\r\n            )\r\n            # \'self.client.leave()\' is an async action, so it must be awaited.\r\n            await self.client.leave()\r\n\r\n    async def on_end(self, game_result: Result):\r\n        """Cleanup and analysis at the end of the game."""\r\n        print(f"[{self.time_formatted}] Lifecycle: on_end() initiated.")\r\n        print(f"FINAL RESULT: {game_result}")\r\n        if game_result == Result.Victory:\r\n            print("CONCLUSION: Mission accomplished.")\r\n        # The bot leaves, so the result is a Defeat if the opponent is still alive.\r\n        elif game_result == Result.Defeat:\r\n            print("CONCLUSION: Test concluded as planned.")\r\n\r\n\r\nif __name__ == "__main__":\r\n    run_game(\r\n        maps.get("AbyssalReefLE"),\r\n        [Bot(Race.Protoss, LifecycleBot()), Computer(Race.Zerg, Difficulty.Easy)],\r\n        realtime=False,\r\n    )\n'})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>o,x:()=>l});var s=n(6540);const r={},i=s.createContext(r);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function l(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);