"use strict";(self.webpackChunkmy_framework_docs=self.webpackChunkmy_framework_docs||[]).push([[3160],{7199:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>a,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.3 - How to Debug and Analyze Replays","title":"7.3 - How to Debug and Analyze Replays","description":"A bot can have flawless code but a flawed strategy. Identifying these strategic bugs requires a different approach than traditional debugging. Your primary tools are controlled local testing, instrumented logging, and most importantly, systematic replay analysis.","source":"@site/docs/Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.3 - How to Debug and Analyze Replays.md","sourceDirName":"Part 3 - Advanced Development/Chapter 7 - Performance and Debugging","slug":"/Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.3 - How to Debug and Analyze Replays","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.3 - How to Debug and Analyze Replays","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"7.2 - Common Pitfalls- Desyncs and Stale Data","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.2 - Common Pitfalls- Desyncs and Stale Data"},"next":{"title":"7.4 - Saving Data Between Matches","permalink":"/learn-python-sc2/docs/Part 3 - Advanced Development/Chapter 7 - Performance and Debugging/7.4 - Saving Data Between Matches"}}');var r=n(4848),l=n(8453);const i={},o=void 0,a={},d=[{value:"<strong>The Debugging Workflow</strong>",id:"the-debugging-workflow",level:4},{value:"<strong>1. Local Testing: Your Laboratory</strong>",id:"1-local-testing-your-laboratory",level:4},{value:"<strong>2. Instrumented Logging: Your Bot&#39;s &quot;Black Box&quot;</strong>",id:"2-instrumented-logging-your-bots-black-box",level:4},{value:"<strong>3. Replay Analysis: The Post-Mortem</strong>",id:"3-replay-analysis-the-post-mortem",level:4}];function c(e){const t={code:"code",em:"em",h4:"h4",hr:"hr",input:"input",li:"li",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,l.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:["A bot can have flawless code but a flawed strategy. Identifying these strategic bugs requires a different approach than traditional debugging. Your primary tools are ",(0,r.jsx)(t.strong,{children:"controlled local testing"}),", ",(0,r.jsx)(t.strong,{children:"instrumented logging"}),", and most importantly, ",(0,r.jsx)(t.strong,{children:"systematic replay analysis"}),"."]}),"\n",(0,r.jsx)(t.h4,{id:"the-debugging-workflow",children:(0,r.jsx)(t.strong,{children:"The Debugging Workflow"})}),"\n",(0,r.jsx)(t.p,{children:"Effective debugging is a cycle of testing, observation, and refinement."}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{children:'+--------------------------+\r\n|  1. Run a Local Test     | <-- Control the variables (map, opponent).\r\n|  (Generate Logs & Replay)|\r\n+--------------------------+\r\n           |\r\n           v\r\n+--------------------------+\r\n|  2. Analyze the Replay   | <-- Watch the game from all perspectives.\r\n|  (Cross-reference logs)  |\r\n+--------------------------+\r\n           |\r\n           v\r\n+--------------------------+\r\n|  3. Identify a Flaw      | <-- "My army attacked into a bad position at 5:30."\r\n|  (Form a hypothesis)     |\r\n+--------------------------+\r\n           |\r\n           v\r\n+--------------------------+\r\n|  4. Modify the Code      | <-- "Add a check to retreat if the enemy\r\n|  (Implement a fix)       |      army value is 20% higher."\r\n+--------------------------+\r\n           |\r\n           \'---------------------\x3e (Repeat)\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"1-local-testing-your-laboratory",children:(0,r.jsx)(t.strong,{children:"1. Local Testing: Your Laboratory"})}),"\n",(0,r.jsxs)(t.p,{children:["The ",(0,r.jsx)(t.code,{children:"run_game"})," block is your testing environment. Use it to create specific, repeatable scenarios."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Test Type"}),(0,r.jsxs)(t.th,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"run_game"})," Configuration"]}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Purpose"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Unit Test"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"realtime=False"}),", no opponent."]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:'Quickly test a single mechanic (e.g., "Does my build order complete?").'})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Integration Test"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"realtime=True"}),", ",(0,r.jsx)(t.code,{children:"Computer"})," opponent."]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Test how your bot's systems work together against a predictable opponent."})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Strategy Test"})}),(0,r.jsxs)(t.td,{style:{textAlign:"left"},children:[(0,r.jsx)(t.code,{children:"realtime=True"}),", vs. another of your bots."]}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Pit specific strategies against each other to find counters and weaknesses."})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Pro Tip:"})," To make your tests repeatable, you can set a ",(0,r.jsx)(t.code,{children:"random_seed"}),'. This ensures that "random" choices (like which worker to select) are the same every time you run the test.']}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"from sc2.main import run_game\r\n\r\nrun_game(..., random_seed=12345)\n"})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"2-instrumented-logging-your-bots-black-box",children:(0,r.jsx)(t.strong,{children:'2. Instrumented Logging: Your Bot\'s "Black Box"'})}),"\n",(0,r.jsxs)(t.p,{children:['Your logs are the "black box recorder" of your bot\'s decisions. Good logs explain ',(0,r.jsx)(t.em,{children:"why"})," an action was taken."]}),"\n",(0,r.jsxs)(t.table,{children:[(0,r.jsx)(t.thead,{children:(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Logging Best Practice"}),(0,r.jsxs)(t.th,{style:{textAlign:"left"},children:["Inefficient Log (",(0,r.jsx)(t.code,{children:'print("Attacking")'}),")"]}),(0,r.jsx)(t.th,{style:{textAlign:"left"},children:"Instrumented Log (Better)"})]})}),(0,r.jsxs)(t.tbody,{children:[(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Be Specific & Contextual"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:'print("Building depot")'})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:'print(f"[{self.time_formatted}] Supply is {self.supply_used}/{self.supply_cap}. Building a depot.")'})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Log State Changes"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:'print("Fighting")'})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:'print(f"[{self.time_formatted}] Army value: 1200, Enemy value: 800. Engaging.")'})})]}),(0,r.jsxs)(t.tr,{children:[(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.strong,{children:"Throttle Your Logs"})}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:"Printing every step."}),(0,r.jsx)(t.td,{style:{textAlign:"left"},children:(0,r.jsx)(t.code,{children:"if self.time - self.last_log_time > 5:"})})]})]})]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsxs)(t.strong,{children:["Recommended Library: ",(0,r.jsx)(t.code,{children:"loguru"})]}),"\r\nThe ",(0,r.jsx)(t.code,{children:"burnysc2"})," library comes with ",(0,r.jsx)(t.code,{children:"loguru"})," pre-installed. It provides colored, timestamped, and leveled logging with almost no setup, making it a professional replacement for ",(0,r.jsx)(t.code,{children:"print()"}),"."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from loguru import logger\r\n\r\n# In on_start:\r\nlogger.add("logs/my_bot_log.log", rotation="10 MB") # Automatically saves logs to a file.\r\n\r\n# In on_step:\r\nif self.supply_left < 5:\r\n    logger.info(f"Supply low ({self.supply_left}), queuing a depot.")\n'})}),"\n",(0,r.jsx)(t.hr,{}),"\n",(0,r.jsx)(t.h4,{id:"3-replay-analysis-the-post-mortem",children:(0,r.jsx)(t.strong,{children:"3. Replay Analysis: The Post-Mortem"})}),"\n",(0,r.jsx)(t.p,{children:"A replay is the ultimate ground truth. It shows you exactly what happened, free from your bot's flawed perception."}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Replay Analysis Checklist:"})}),"\n",(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"1. Save the Replay:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'from sc2.main import run_game\r\n\r\nrun_game(..., save_replay_as="MyBot_vs_Rush.SC2Replay")\n'})}),"\n"]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"2. Open StarCraft II:"}),' Launch the game client manually and go to the "Replays" tab.']}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"3. Use Observer Tools Systematically:"}),"\n",(0,r.jsxs)(t.ul,{className:"contains-task-list",children:["\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"Watch from Your Bot's Perspective:"})," What did it see? Was its vision limited?"]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"Watch from the Enemy's Perspective:"})," How did they react to you? Did they scout your strategy?"]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"Watch with Full Vision:"}),' See the "perfect information" view. Where could your bot have made a better decision if it had scouted?']}),"\n"]}),"\n"]}),"\n",(0,r.jsxs)(t.li,{className:"task-list-item",children:[(0,r.jsx)(t.input,{type:"checkbox",disabled:!0})," ",(0,r.jsx)(t.strong,{children:"4. Cross-Reference with Logs:"}),' Have your log file open. If the log says "Engaging enemy at 5:30," jump to that timestamp in the replay. Did the engagement happen as your bot intended?']}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Key Questions to Ask During Analysis:"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Economy:"})," Are my workers ever idle? Is my money high while my production is not queued?"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Strategy:"})," Did I expand at the right time? Did I build the correct counter-units?"]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Tactics:"})," Did my army get caught in a bad position? Did I focus fire the wrong targets?"]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"By treating debugging as a scientific process of forming a hypothesis, running a controlled test, and analyzing the results, you can systematically improve both the code and the strategic intelligence of your bot."})]})}function h(e={}){const{wrapper:t}={...(0,l.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>o});var s=n(6540);const r={},l=s.createContext(r);function i(e){const t=s.useContext(l);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),s.createElement(l.Provider,{value:t},e.children)}}}]);